
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001a4  00800100  00001140  000011d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001140  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  008002a4  008002a4  00001378  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001378  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001650  00000000  00000000  00001540  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cb5  00000000  00000000  00002b90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bc4  00000000  00000000  00003845  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  0000440c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ca  00000000  00000000  00004718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008e4  00000000  00000000  00004ce2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  000055c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e0 e4       	ldi	r30, 0x40	; 64
      84:	f1 e1       	ldi	r31, 0x11	; 17
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a4 3a       	cpi	r26, 0xA4	; 164
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	22 e0       	ldi	r18, 0x02	; 2
      94:	a4 ea       	ldi	r26, 0xA4	; 164
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	ae 3a       	cpi	r26, 0xAE	; 174
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 02 02 	call	0x404	; 0x404 <main>
      a6:	0c 94 9e 08 	jmp	0x113c	; 0x113c <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <CAN_init>:
#include "CAN_registers.h"
#include "SPI_driver.h"
#include "CAN_driver.h"

void CAN_init(){
	reset();
      ae:	0e 94 bf 02 	call	0x57e	; 0x57e <reset>
	write(0x4B,0x0F);
      b2:	6f e0       	ldi	r22, 0x0F	; 15
      b4:	8b e4       	ldi	r24, 0x4B	; 75
      b6:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>
	
	reset();
      ba:	0e 94 bf 02 	call	0x57e	; 0x57e <reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      be:	89 ef       	ldi	r24, 0xF9	; 249
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	01 97       	sbiw	r24, 0x01	; 1
      c4:	f1 f7       	brne	.-4      	; 0xc2 <CAN_init+0x14>
      c6:	00 c0       	rjmp	.+0      	; 0xc8 <CAN_init+0x1a>
      c8:	00 00       	nop
	
	////////////////////////////
	
	
	//Clear masks to RX all messages
	write(RXM0SIDH,0x00);
      ca:	60 e0       	ldi	r22, 0x00	; 0
      cc:	80 e2       	ldi	r24, 0x20	; 32
      ce:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>
	write(RXM0SIDL,0x00);
      d2:	60 e0       	ldi	r22, 0x00	; 0
      d4:	81 e2       	ldi	r24, 0x21	; 33
      d6:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>

	//Clear filter... really only concerned to clear EXIDE bit
	write(RXF0SIDL,0x00);
      da:	60 e0       	ldi	r22, 0x00	; 0
      dc:	81 e0       	ldi	r24, 0x01	; 1
      de:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>

	//Set CNF1
	write(CNF1,CAN_125kbps);
      e2:	67 e0       	ldi	r22, 0x07	; 7
      e4:	8a e2       	ldi	r24, 0x2A	; 42
      e6:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>

	//Set CNF2
	write(CNF2,0x80 | PHSEG1_3TQ | PRSEG_1TQ);
      ea:	60 e9       	ldi	r22, 0x90	; 144
      ec:	89 e2       	ldi	r24, 0x29	; 41
      ee:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>

	//Set CNF3
	write(CNF3, PHSEG2_3TQ);
      f2:	62 e0       	ldi	r22, 0x02	; 2
      f4:	88 e2       	ldi	r24, 0x28	; 40
      f6:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>

	//Set TXB0 DLC and Data for a "Write Register" Input Message to the MCP25020
	write(TXB0SIDH,0xA0);    //Set TXB0 SIDH
      fa:	60 ea       	ldi	r22, 0xA0	; 160
      fc:	81 e3       	ldi	r24, 0x31	; 49
      fe:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>
	write(TXB0SIDL,0x00);    //Set TXB0 SIDL
     102:	60 e0       	ldi	r22, 0x00	; 0
     104:	82 e3       	ldi	r24, 0x32	; 50
     106:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>
	write(TXB0DLC,DLC_3);    //Set DLC = 3 bytes
     10a:	63 e0       	ldi	r22, 0x03	; 3
     10c:	85 e3       	ldi	r24, 0x35	; 53
     10e:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>
	write(TXB0D0,0x1E);      //D0 = Addr = 0x1E
     112:	6e e1       	ldi	r22, 0x1E	; 30
     114:	86 e3       	ldi	r24, 0x36	; 54
     116:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>
	write(TXB0D1,0x10);      //D1 = Mask = 0x10
     11a:	60 e1       	ldi	r22, 0x10	; 16
     11c:	87 e3       	ldi	r24, 0x37	; 55
     11e:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>

	//Set TXB1 DLC and Data for a "READ I/O IRM"
	write(TXB1SIDH,0x50);    //Set TXB0 SIDH
     122:	60 e5       	ldi	r22, 0x50	; 80
     124:	81 e4       	ldi	r24, 0x41	; 65
     126:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>
	write(TXB1SIDL,0x00);    //Set TXB0 SIDL
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	82 e4       	ldi	r24, 0x42	; 66
     12e:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>
	write(TXB1DLC,0x40 | DLC_8);    //Set DLC = 3 bytes and RTR bit
     132:	68 e4       	ldi	r22, 0x48	; 72
     134:	85 e4       	ldi	r24, 0x45	; 69
     136:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>
	
	//Interrupt on RXB0 - CANINTE
	write(CANINTE,0x01);    //
     13a:	61 e0       	ldi	r22, 0x01	; 1
     13c:	8b e2       	ldi	r24, 0x2B	; 43
     13e:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>

	//Set NORMAL mode
	write(CANCTRL,REQOP_LOOPBACK | CLKOUT_ENABLED);
     142:	64 e4       	ldi	r22, 0x44	; 68
     144:	8f e0       	ldi	r24, 0x0F	; 15
     146:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>
	
	//Verify device entered Normal mode
	char dummy = read(CANSTAT);
     14a:	8e e0       	ldi	r24, 0x0E	; 14
     14c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <read>
	if (OPMODE_LOOPBACK != (dummy && 0xE0))
		write(CANCTRL,REQOP_LOOPBACK | CLKOUT_ENABLED);
     150:	64 e4       	ldi	r22, 0x44	; 68
     152:	8f e0       	ldi	r24, 0x0F	; 15
     154:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>
     158:	08 95       	ret

0000015a <CAN_transmit>:
}

uint8_t CAN_transmit(struct CAN_msg *msg) {
     15a:	ef 92       	push	r14
     15c:	ff 92       	push	r15
     15e:	0f 93       	push	r16
     160:	1f 93       	push	r17
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
     166:	8c 01       	movw	r16, r24
	char status = read_status();
     168:	0e 94 97 02 	call	0x52e	; 0x52e <read_status>
	char rts;
	uint8_t address;
	if ((status & (1 << 2)) == 0) {
     16c:	82 ff       	sbrs	r24, 2
     16e:	0c c0       	rjmp	.+24     	; 0x188 <CAN_transmit+0x2e>
		address = TXB0SIDH;
		rts = 0x01;
	} else if ((status & (1 << 4)) == 0) {
     170:	84 ff       	sbrs	r24, 4
     172:	11 c0       	rjmp	.+34     	; 0x196 <CAN_transmit+0x3c>
		address = TXB1SIDH;
		rts = 0x02;
	} else if ((status & (1 << 6)) == 0) {
     174:	86 fd       	sbrc	r24, 6
     176:	54 c0       	rjmp	.+168    	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
		address = TXB2SIDH;
     178:	0f 2e       	mov	r0, r31
     17a:	f1 e5       	ldi	r31, 0x51	; 81
     17c:	ff 2e       	mov	r15, r31
     17e:	f0 2d       	mov	r31, r0
		rts = 0x04;
     180:	68 94       	set
     182:	ee 24       	eor	r14, r14
     184:	e2 f8       	bld	r14, 2
     186:	0e c0       	rjmp	.+28     	; 0x1a4 <CAN_transmit+0x4a>
uint8_t CAN_transmit(struct CAN_msg *msg) {
	char status = read_status();
	char rts;
	uint8_t address;
	if ((status & (1 << 2)) == 0) {
		address = TXB0SIDH;
     188:	0f 2e       	mov	r0, r31
     18a:	f1 e3       	ldi	r31, 0x31	; 49
     18c:	ff 2e       	mov	r15, r31
     18e:	f0 2d       	mov	r31, r0
		rts = 0x01;
     190:	ee 24       	eor	r14, r14
     192:	e3 94       	inc	r14
     194:	07 c0       	rjmp	.+14     	; 0x1a4 <CAN_transmit+0x4a>
	} else if ((status & (1 << 4)) == 0) {
		address = TXB1SIDH;
     196:	0f 2e       	mov	r0, r31
     198:	f1 e4       	ldi	r31, 0x41	; 65
     19a:	ff 2e       	mov	r15, r31
     19c:	f0 2d       	mov	r31, r0
		rts = 0x02;
     19e:	68 94       	set
     1a0:	ee 24       	eor	r14, r14
     1a2:	e1 f8       	bld	r14, 1
		rts = 0x04;
	} else {
		return 0;
	}
	
	write(address, msg->id >> 3);
     1a4:	f8 01       	movw	r30, r16
     1a6:	60 81       	ld	r22, Z
     1a8:	71 81       	ldd	r23, Z+1	; 0x01
     1aa:	76 95       	lsr	r23
     1ac:	67 95       	ror	r22
     1ae:	76 95       	lsr	r23
     1b0:	67 95       	ror	r22
     1b2:	76 95       	lsr	r23
     1b4:	67 95       	ror	r22
     1b6:	8f 2d       	mov	r24, r15
     1b8:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>
	write(address+1, msg->id << 5);
     1bc:	f8 01       	movw	r30, r16
     1be:	60 81       	ld	r22, Z
     1c0:	62 95       	swap	r22
     1c2:	66 0f       	add	r22, r22
     1c4:	60 7e       	andi	r22, 0xE0	; 224
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	8f 0d       	add	r24, r15
     1ca:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>
	write(address+2, 0);
     1ce:	60 e0       	ldi	r22, 0x00	; 0
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	8f 0d       	add	r24, r15
     1d4:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>
	write(address+3, 0);
     1d8:	60 e0       	ldi	r22, 0x00	; 0
     1da:	83 e0       	ldi	r24, 0x03	; 3
     1dc:	8f 0d       	add	r24, r15
     1de:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>
	
	write(address+4, msg->length);
     1e2:	f8 01       	movw	r30, r16
     1e4:	62 81       	ldd	r22, Z+2	; 0x02
     1e6:	84 e0       	ldi	r24, 0x04	; 4
     1e8:	8f 0d       	add	r24, r15
     1ea:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>
	for(int i = 0; i < msg->length; i++) {
     1ee:	c0 e0       	ldi	r28, 0x00	; 0
     1f0:	d0 e0       	ldi	r29, 0x00	; 0
     1f2:	0a c0       	rjmp	.+20     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
		write(address+5+i, msg->data[i]);
     1f4:	f8 01       	movw	r30, r16
     1f6:	ec 0f       	add	r30, r28
     1f8:	fd 1f       	adc	r31, r29
     1fa:	63 81       	ldd	r22, Z+3	; 0x03
     1fc:	8c 2f       	mov	r24, r28
     1fe:	8f 0d       	add	r24, r15
     200:	8b 5f       	subi	r24, 0xFB	; 251
     202:	0e 94 76 02 	call	0x4ec	; 0x4ec <write>
	write(address+1, msg->id << 5);
	write(address+2, 0);
	write(address+3, 0);
	
	write(address+4, msg->length);
	for(int i = 0; i < msg->length; i++) {
     206:	21 96       	adiw	r28, 0x01	; 1
     208:	f8 01       	movw	r30, r16
     20a:	22 81       	ldd	r18, Z+2	; 0x02
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	c2 17       	cp	r28, r18
     210:	d3 07       	cpc	r29, r19
     212:	84 f3       	brlt	.-32     	; 0x1f4 <CAN_transmit+0x9a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     214:	00 00       	nop
		write(address+5+i, msg->data[i]);
	}
	
	_delay_us(1);
	RTS(rts);
     216:	8e 2d       	mov	r24, r14
     218:	0e 94 8c 02 	call	0x518	; 0x518 <RTS>
	
	return rts;
     21c:	8e 2d       	mov	r24, r14
     21e:	01 c0       	rjmp	.+2      	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
		rts = 0x02;
	} else if ((status & (1 << 6)) == 0) {
		address = TXB2SIDH;
		rts = 0x04;
	} else {
		return 0;
     220:	80 e0       	ldi	r24, 0x00	; 0
	
	_delay_us(1);
	RTS(rts);
	
	return rts;
}
     222:	df 91       	pop	r29
     224:	cf 91       	pop	r28
     226:	1f 91       	pop	r17
     228:	0f 91       	pop	r16
     22a:	ff 90       	pop	r15
     22c:	ef 90       	pop	r14
     22e:	08 95       	ret

00000230 <CAN_receive>:

uint8_t CAN_receive(struct CAN_msg *msg) {
     230:	bf 92       	push	r11
     232:	cf 92       	push	r12
     234:	df 92       	push	r13
     236:	ef 92       	push	r14
     238:	ff 92       	push	r15
     23a:	0f 93       	push	r16
     23c:	1f 93       	push	r17
     23e:	cf 93       	push	r28
     240:	df 93       	push	r29
     242:	8c 01       	movw	r16, r24
	uint8_t status = read_rx_status();
     244:	0e 94 c9 02 	call	0x592	; 0x592 <read_rx_status>
     248:	7c 01       	movw	r14, r24
	uint8_t address;
	
	if (status & (1 << 6)) {
     24a:	6c 01       	movw	r12, r24
     24c:	80 e4       	ldi	r24, 0x40	; 64
     24e:	c8 22       	and	r12, r24
     250:	dd 24       	eor	r13, r13
     252:	e6 fc       	sbrc	r14, 6
     254:	08 c0       	rjmp	.+16     	; 0x266 <CAN_receive+0x36>
		address = RXB0SIDH;
	} else if (status & (1 << 7)) {
     256:	ee 20       	and	r14, r14
     258:	0c f0       	brlt	.+2      	; 0x25c <CAN_receive+0x2c>
     25a:	4e c0       	rjmp	.+156    	; 0x2f8 <CAN_receive+0xc8>
		address = RXB1SIDH;
     25c:	0f 2e       	mov	r0, r31
     25e:	f1 e7       	ldi	r31, 0x71	; 113
     260:	bf 2e       	mov	r11, r31
     262:	f0 2d       	mov	r31, r0
     264:	04 c0       	rjmp	.+8      	; 0x26e <CAN_receive+0x3e>
uint8_t CAN_receive(struct CAN_msg *msg) {
	uint8_t status = read_rx_status();
	uint8_t address;
	
	if (status & (1 << 6)) {
		address = RXB0SIDH;
     266:	0f 2e       	mov	r0, r31
     268:	f1 e6       	ldi	r31, 0x61	; 97
     26a:	bf 2e       	mov	r11, r31
     26c:	f0 2d       	mov	r31, r0
	} else {
		return 0;
	}
	
	//write(address);
	msg->id = ((uint16_t)read(address)) << 3;
     26e:	8b 2d       	mov	r24, r11
     270:	0e 94 64 02 	call	0x4c8	; 0x4c8 <read>
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	88 0f       	add	r24, r24
     278:	99 1f       	adc	r25, r25
     27a:	88 0f       	add	r24, r24
     27c:	99 1f       	adc	r25, r25
     27e:	88 0f       	add	r24, r24
     280:	99 1f       	adc	r25, r25
     282:	f8 01       	movw	r30, r16
     284:	91 83       	std	Z+1, r25	; 0x01
     286:	80 83       	st	Z, r24
	msg->id |= (read(address+1))>>5;
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	8b 0d       	add	r24, r11
     28c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <read>
     290:	28 2f       	mov	r18, r24
     292:	22 95       	swap	r18
     294:	26 95       	lsr	r18
     296:	27 70       	andi	r18, 0x07	; 7
     298:	f8 01       	movw	r30, r16
     29a:	80 81       	ld	r24, Z
     29c:	91 81       	ldd	r25, Z+1	; 0x01
     29e:	82 2b       	or	r24, r18
     2a0:	91 83       	std	Z+1, r25	; 0x01
     2a2:	80 83       	st	Z, r24
	msg->length = read(address+4);
     2a4:	84 e0       	ldi	r24, 0x04	; 4
     2a6:	8b 0d       	add	r24, r11
     2a8:	0e 94 64 02 	call	0x4c8	; 0x4c8 <read>
     2ac:	f8 01       	movw	r30, r16
     2ae:	82 83       	std	Z+2, r24	; 0x02
	for(int i = 0; i < msg->length; i++) {
     2b0:	c0 e0       	ldi	r28, 0x00	; 0
     2b2:	d0 e0       	ldi	r29, 0x00	; 0
     2b4:	0a c0       	rjmp	.+20     	; 0x2ca <CAN_receive+0x9a>
		msg->data[i]=read(address+5+i);
     2b6:	8c 2f       	mov	r24, r28
     2b8:	8b 0d       	add	r24, r11
     2ba:	8b 5f       	subi	r24, 0xFB	; 251
     2bc:	0e 94 64 02 	call	0x4c8	; 0x4c8 <read>
     2c0:	f8 01       	movw	r30, r16
     2c2:	ec 0f       	add	r30, r28
     2c4:	fd 1f       	adc	r31, r29
     2c6:	83 83       	std	Z+3, r24	; 0x03
	
	//write(address);
	msg->id = ((uint16_t)read(address)) << 3;
	msg->id |= (read(address+1))>>5;
	msg->length = read(address+4);
	for(int i = 0; i < msg->length; i++) {
     2c8:	21 96       	adiw	r28, 0x01	; 1
     2ca:	f8 01       	movw	r30, r16
     2cc:	22 81       	ldd	r18, Z+2	; 0x02
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	c2 17       	cp	r28, r18
     2d2:	d3 07       	cpc	r29, r19
     2d4:	84 f3       	brlt	.-32     	; 0x2b6 <CAN_receive+0x86>
		msg->data[i]=read(address+5+i);
	}
	if(status & (1 << 6)){
     2d6:	cd 28       	or	r12, r13
     2d8:	31 f0       	breq	.+12     	; 0x2e6 <CAN_receive+0xb6>
		bit_modify(CANINTF, (1<<RX0IF),0);
     2da:	40 e0       	ldi	r20, 0x00	; 0
     2dc:	62 e0       	ldi	r22, 0x02	; 2
     2de:	8c e2       	ldi	r24, 0x2C	; 44
     2e0:	0e 94 a3 02 	call	0x546	; 0x546 <bit_modify>
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <CAN_receive+0xc0>
	}
	else {
		bit_modify(CANINTF, (1<<RX1IF),0);	
     2e6:	40 e0       	ldi	r20, 0x00	; 0
     2e8:	64 e0       	ldi	r22, 0x04	; 4
     2ea:	8c e2       	ldi	r24, 0x2C	; 44
     2ec:	0e 94 a3 02 	call	0x546	; 0x546 <bit_modify>
	}
	
	return (status & 0x07) +1;
     2f0:	8e 2d       	mov	r24, r14
     2f2:	87 70       	andi	r24, 0x07	; 7
     2f4:	8f 5f       	subi	r24, 0xFF	; 255
     2f6:	01 c0       	rjmp	.+2      	; 0x2fa <CAN_receive+0xca>
	if (status & (1 << 6)) {
		address = RXB0SIDH;
	} else if (status & (1 << 7)) {
		address = RXB1SIDH;
	} else {
		return 0;
     2f8:	80 e0       	ldi	r24, 0x00	; 0
		bit_modify(CANINTF, (1<<RX1IF),0);	
	}
	
	return (status & 0x07) +1;
		
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	1f 91       	pop	r17
     300:	0f 91       	pop	r16
     302:	ff 90       	pop	r15
     304:	ef 90       	pop	r14
     306:	df 90       	pop	r13
     308:	cf 90       	pop	r12
     30a:	bf 90       	pop	r11
     30c:	08 95       	ret

0000030e <SRAM_test>:
	printf("Slider 1 digital input %d \n" ,digital_data);	
	digital_data = ADC_address[0];	
	printf("Slider 2 digital input %d \n\n" ,digital_data);	
	
	
}
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	8a e0       	ldi	r24, 0x0A	; 10
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 42 05 	call	0xa84	; 0xa84 <puts>
     322:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <rand>
     326:	7c 01       	movw	r14, r24
     328:	0e 94 d6 04 	call	0x9ac	; 0x9ac <srand>
     32c:	c0 e0       	ldi	r28, 0x00	; 0
     32e:	d0 e0       	ldi	r29, 0x00	; 0
     330:	00 e0       	ldi	r16, 0x00	; 0
     332:	10 e0       	ldi	r17, 0x00	; 0
     334:	20 c0       	rjmp	.+64     	; 0x376 <SRAM_test+0x68>
     336:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <rand>
     33a:	fe 01       	movw	r30, r28
     33c:	f8 5e       	subi	r31, 0xE8	; 232
     33e:	80 83       	st	Z, r24
     340:	20 81       	ld	r18, Z
     342:	28 17       	cp	r18, r24
     344:	b9 f0       	breq	.+46     	; 0x374 <SRAM_test+0x66>
     346:	99 27       	eor	r25, r25
     348:	9f 93       	push	r25
     34a:	8f 93       	push	r24
     34c:	1f 92       	push	r1
     34e:	2f 93       	push	r18
     350:	df 93       	push	r29
     352:	cf 93       	push	r28
     354:	80 e2       	ldi	r24, 0x20	; 32
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	9f 93       	push	r25
     35a:	8f 93       	push	r24
     35c:	0e 94 2c 05 	call	0xa58	; 0xa58 <printf>
     360:	0f 5f       	subi	r16, 0xFF	; 255
     362:	1f 4f       	sbci	r17, 0xFF	; 255
     364:	8d b7       	in	r24, 0x3d	; 61
     366:	9e b7       	in	r25, 0x3e	; 62
     368:	08 96       	adiw	r24, 0x08	; 8
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	f8 94       	cli
     36e:	9e bf       	out	0x3e, r25	; 62
     370:	0f be       	out	0x3f, r0	; 63
     372:	8d bf       	out	0x3d, r24	; 61
     374:	21 96       	adiw	r28, 0x01	; 1
     376:	c1 15       	cp	r28, r1
     378:	98 e0       	ldi	r25, 0x08	; 8
     37a:	d9 07       	cpc	r29, r25
     37c:	e0 f2       	brcs	.-72     	; 0x336 <SRAM_test+0x28>
     37e:	c7 01       	movw	r24, r14
     380:	0e 94 d6 04 	call	0x9ac	; 0x9ac <srand>
     384:	c0 e0       	ldi	r28, 0x00	; 0
     386:	d0 e0       	ldi	r29, 0x00	; 0
     388:	e1 2c       	mov	r14, r1
     38a:	f1 2c       	mov	r15, r1
     38c:	20 c0       	rjmp	.+64     	; 0x3ce <SRAM_test+0xc0>
     38e:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <rand>
     392:	fe 01       	movw	r30, r28
     394:	f8 5e       	subi	r31, 0xE8	; 232
     396:	20 81       	ld	r18, Z
     398:	28 17       	cp	r18, r24
     39a:	c1 f0       	breq	.+48     	; 0x3cc <SRAM_test+0xbe>
     39c:	99 27       	eor	r25, r25
     39e:	9f 93       	push	r25
     3a0:	8f 93       	push	r24
     3a2:	1f 92       	push	r1
     3a4:	2f 93       	push	r18
     3a6:	df 93       	push	r29
     3a8:	cf 93       	push	r28
     3aa:	8a e5       	ldi	r24, 0x5A	; 90
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	9f 93       	push	r25
     3b0:	8f 93       	push	r24
     3b2:	0e 94 2c 05 	call	0xa58	; 0xa58 <printf>
     3b6:	8f ef       	ldi	r24, 0xFF	; 255
     3b8:	e8 1a       	sub	r14, r24
     3ba:	f8 0a       	sbc	r15, r24
     3bc:	8d b7       	in	r24, 0x3d	; 61
     3be:	9e b7       	in	r25, 0x3e	; 62
     3c0:	08 96       	adiw	r24, 0x08	; 8
     3c2:	0f b6       	in	r0, 0x3f	; 63
     3c4:	f8 94       	cli
     3c6:	9e bf       	out	0x3e, r25	; 62
     3c8:	0f be       	out	0x3f, r0	; 63
     3ca:	8d bf       	out	0x3d, r24	; 61
     3cc:	21 96       	adiw	r28, 0x01	; 1
     3ce:	c1 15       	cp	r28, r1
     3d0:	98 e0       	ldi	r25, 0x08	; 8
     3d2:	d9 07       	cpc	r29, r25
     3d4:	e0 f2       	brcs	.-72     	; 0x38e <SRAM_test+0x80>
     3d6:	ff 92       	push	r15
     3d8:	ef 92       	push	r14
     3da:	1f 93       	push	r17
     3dc:	0f 93       	push	r16
     3de:	87 e9       	ldi	r24, 0x97	; 151
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	9f 93       	push	r25
     3e4:	8f 93       	push	r24
     3e6:	0e 94 2c 05 	call	0xa58	; 0xa58 <printf>
     3ea:	0f 90       	pop	r0
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	0f 90       	pop	r0
     3f2:	0f 90       	pop	r0
     3f4:	0f 90       	pop	r0
     3f6:	df 91       	pop	r29
     3f8:	cf 91       	pop	r28
     3fa:	1f 91       	pop	r17
     3fc:	0f 91       	pop	r16
     3fe:	ff 90       	pop	r15
     400:	ef 90       	pop	r14
     402:	08 95       	ret

00000404 <main>:
int main(){
     404:	cf 93       	push	r28
     406:	df 93       	push	r29
	//PB2 is the left button from PORTB7 on AT90USB1287 board
	//PB1 is the joystick button,  third pin on board goes to PB1
	//Filter 4 from AT90USB1287 board is right slider goes to pin AIN3 of ADC
	//Filter 2 from AT90USB1287 board is left slider goes to pin AIN2 of ADC
	
	SFIOR |= (1 << XMM2);
     408:	80 b7       	in	r24, 0x30	; 48
     40a:	80 62       	ori	r24, 0x20	; 32
     40c:	80 bf       	out	0x30, r24	; 48
	MCUCR |= (1 << SRE);
     40e:	85 b7       	in	r24, 0x35	; 53
     410:	80 68       	ori	r24, 0x80	; 128
     412:	85 bf       	out	0x35, r24	; 53
	DDRB = 0x00;
     414:	17 ba       	out	0x17, r1	; 23
	PORTB = 0x0E;
     416:	8e e0       	ldi	r24, 0x0E	; 14
     418:	88 bb       	out	0x18, r24	; 24
	
	alternate_printf();
     41a:	0e 94 31 03 	call	0x662	; 0x662 <alternate_printf>
	SRAM_test();
     41e:	0e 94 87 01 	call	0x30e	; 0x30e <SRAM_test>
	oled_print("smoking",0);
	*/
	
	//menuNavigator();
	
	SPI_master_init();
     422:	0e 94 d5 02 	call	0x5aa	; 0x5aa <SPI_master_init>
	CAN_init();
     426:	0e 94 57 00 	call	0xae	; 0xae <CAN_init>
	
	struct CAN_msg* msg = malloc(sizeof(struct CAN_msg));
     42a:	8b e0       	ldi	r24, 0x0B	; 11
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 64 03 	call	0x6c8	; 0x6c8 <malloc>
	msg->id = 123;
     432:	2b e7       	ldi	r18, 0x7B	; 123
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	fc 01       	movw	r30, r24
     438:	31 83       	std	Z+1, r19	; 0x01
     43a:	20 83       	st	Z, r18
	msg->length = 8;
     43c:	28 e0       	ldi	r18, 0x08	; 8
     43e:	22 83       	std	Z+2, r18	; 0x02
	strcpy(msg->data, "Hello");
     440:	dc 01       	movw	r26, r24
     442:	13 96       	adiw	r26, 0x03	; 3
     444:	26 e0       	ldi	r18, 0x06	; 6
     446:	e0 e7       	ldi	r30, 0x70	; 112
     448:	f2 e0       	ldi	r31, 0x02	; 2
     44a:	01 90       	ld	r0, Z+
     44c:	0d 92       	st	X+, r0
     44e:	2a 95       	dec	r18
     450:	e1 f7       	brne	.-8      	; 0x44a <main+0x46>
	
	CAN_transmit(msg);
     452:	0e 94 ad 00 	call	0x15a	; 0x15a <CAN_transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     456:	81 ee       	ldi	r24, 0xE1	; 225
     458:	94 e0       	ldi	r25, 0x04	; 4
     45a:	01 97       	sbiw	r24, 0x01	; 1
     45c:	f1 f7       	brne	.-4      	; 0x45a <main+0x56>
     45e:	00 c0       	rjmp	.+0      	; 0x460 <main+0x5c>
     460:	00 00       	nop
	// DO NOT DELETE THIS DELAY
	_delay_ms(5);
	//printf("transmit return is %d\n", tr_ret);
	//printf("\0");
	
	struct CAN_msg* rx_msg = malloc(sizeof(struct CAN_msg));
     462:	8b e0       	ldi	r24, 0x0B	; 11
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 64 03 	call	0x6c8	; 0x6c8 <malloc>
     46a:	ec 01       	movw	r28, r24
	rx_msg->id = 61;
     46c:	8d e3       	ldi	r24, 0x3D	; 61
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	99 83       	std	Y+1, r25	; 0x01
     472:	88 83       	st	Y, r24
	rx_msg->length = 6;
     474:	86 e0       	ldi	r24, 0x06	; 6
     476:	8a 83       	std	Y+2, r24	; 0x02
	
	CAN_receive(rx_msg);
     478:	ce 01       	movw	r24, r28
     47a:	0e 94 18 01 	call	0x230	; 0x230 <CAN_receive>
	//printf("\0");
	//printf("\0", rx_ret);
	
	printf("id is %d\n", rx_msg->id);
     47e:	89 81       	ldd	r24, Y+1	; 0x01
     480:	8f 93       	push	r24
     482:	88 81       	ld	r24, Y
     484:	8f 93       	push	r24
     486:	86 e7       	ldi	r24, 0x76	; 118
     488:	92 e0       	ldi	r25, 0x02	; 2
     48a:	9f 93       	push	r25
     48c:	8f 93       	push	r24
     48e:	0e 94 2c 05 	call	0xa58	; 0xa58 <printf>
	printf("length is %d\n", rx_msg->length);
     492:	8a 81       	ldd	r24, Y+2	; 0x02
     494:	1f 92       	push	r1
     496:	8f 93       	push	r24
     498:	80 e8       	ldi	r24, 0x80	; 128
     49a:	92 e0       	ldi	r25, 0x02	; 2
     49c:	9f 93       	push	r25
     49e:	8f 93       	push	r24
     4a0:	0e 94 2c 05 	call	0xa58	; 0xa58 <printf>
	printf(rx_msg->data);
     4a4:	23 96       	adiw	r28, 0x03	; 3
     4a6:	df 93       	push	r29
     4a8:	cf 93       	push	r28
     4aa:	0e 94 2c 05 	call	0xa58	; 0xa58 <printf>
     4ae:	8d b7       	in	r24, 0x3d	; 61
     4b0:	9e b7       	in	r25, 0x3e	; 62
     4b2:	0a 96       	adiw	r24, 0x0a	; 10
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	9e bf       	out	0x3e, r25	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	8d bf       	out	0x3d, r24	; 61
	
	
	
	
	return 0;
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	08 95       	ret

000004c8 <read>:
#include <stdio.h>
#include <avr/io.h>
#include <util/delay.h>
#include "SPI_driver.h"

char read(char address){
     4c8:	cf 93       	push	r28
     4ca:	c8 2f       	mov	r28, r24
	SS_Enable();
     4cc:	88 b3       	in	r24, 0x18	; 24
     4ce:	8f 7e       	andi	r24, 0xEF	; 239
     4d0:	88 bb       	out	0x18, r24	; 24
	char data;
	SPI_MasterTransmit(0x03);
     4d2:	83 e0       	ldi	r24, 0x03	; 3
     4d4:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     4d8:	8c 2f       	mov	r24, r28
     4da:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_MasterTransmit>
	data = SPI_MasterReceive();
     4de:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <SPI_MasterReceive>
	SS_Disable();
     4e2:	98 b3       	in	r25, 0x18	; 24
     4e4:	90 61       	ori	r25, 0x10	; 16
     4e6:	98 bb       	out	0x18, r25	; 24
	return data;
}
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <write>:
	
void write(char address, char data){
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	d8 2f       	mov	r29, r24
     4f2:	c6 2f       	mov	r28, r22
	SS_Enable();
     4f4:	88 b3       	in	r24, 0x18	; 24
     4f6:	8f 7e       	andi	r24, 0xEF	; 239
     4f8:	88 bb       	out	0x18, r24	; 24
	SPI_MasterTransmit(0x02);
     4fa:	82 e0       	ldi	r24, 0x02	; 2
     4fc:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     500:	8d 2f       	mov	r24, r29
     502:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
     506:	8c 2f       	mov	r24, r28
     508:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_MasterTransmit>
	SS_Disable();	
     50c:	88 b3       	in	r24, 0x18	; 24
     50e:	80 61       	ori	r24, 0x10	; 16
     510:	88 bb       	out	0x18, r24	; 24
}
     512:	df 91       	pop	r29
     514:	cf 91       	pop	r28
     516:	08 95       	ret

00000518 <RTS>:
	
void RTS(char buffer){
	char mask = 0x07;
	char instruction = ((buffer & mask) | 0x80);
     518:	87 70       	andi	r24, 0x07	; 7
	SS_Enable();
     51a:	98 b3       	in	r25, 0x18	; 24
     51c:	9f 7e       	andi	r25, 0xEF	; 239
     51e:	98 bb       	out	0x18, r25	; 24
	SPI_MasterTransmit(instruction);
     520:	80 68       	ori	r24, 0x80	; 128
     522:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_MasterTransmit>
	SS_Disable();
     526:	88 b3       	in	r24, 0x18	; 24
     528:	80 61       	ori	r24, 0x10	; 16
     52a:	88 bb       	out	0x18, r24	; 24
     52c:	08 95       	ret

0000052e <read_status>:
	
}
	
char read_status(){
	SS_Enable();
     52e:	88 b3       	in	r24, 0x18	; 24
     530:	8f 7e       	andi	r24, 0xEF	; 239
     532:	88 bb       	out	0x18, r24	; 24
	char data;
	SPI_MasterTransmit(0xA0);
     534:	80 ea       	ldi	r24, 0xA0	; 160
     536:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_MasterTransmit>
	data = SPI_MasterReceive();
     53a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <SPI_MasterReceive>
	SS_Disable();
     53e:	98 b3       	in	r25, 0x18	; 24
     540:	90 61       	ori	r25, 0x10	; 16
     542:	98 bb       	out	0x18, r25	; 24
	return data;
}
     544:	08 95       	ret

00000546 <bit_modify>:
	
void bit_modify(char address, char mask, char data){
     546:	1f 93       	push	r17
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	18 2f       	mov	r17, r24
     54e:	d6 2f       	mov	r29, r22
     550:	c4 2f       	mov	r28, r20
	SS_Enable();
     552:	88 b3       	in	r24, 0x18	; 24
     554:	8f 7e       	andi	r24, 0xEF	; 239
     556:	88 bb       	out	0x18, r24	; 24
	SPI_MasterTransmit(0x05);
     558:	85 e0       	ldi	r24, 0x05	; 5
     55a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_MasterTransmit>
	SPI_MasterTransmit(address);
     55e:	81 2f       	mov	r24, r17
     560:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_MasterTransmit>
	SPI_MasterTransmit(mask);
     564:	8d 2f       	mov	r24, r29
     566:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_MasterTransmit>
	SPI_MasterTransmit(data);
     56a:	8c 2f       	mov	r24, r28
     56c:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_MasterTransmit>
	SS_Disable();
     570:	88 b3       	in	r24, 0x18	; 24
     572:	80 61       	ori	r24, 0x10	; 16
     574:	88 bb       	out	0x18, r24	; 24
}
     576:	df 91       	pop	r29
     578:	cf 91       	pop	r28
     57a:	1f 91       	pop	r17
     57c:	08 95       	ret

0000057e <reset>:

	
void reset(){
	SS_Enable();
     57e:	88 b3       	in	r24, 0x18	; 24
     580:	8f 7e       	andi	r24, 0xEF	; 239
     582:	88 bb       	out	0x18, r24	; 24
	SPI_MasterTransmit(0xC0);
     584:	80 ec       	ldi	r24, 0xC0	; 192
     586:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_MasterTransmit>
	SS_Disable();
     58a:	88 b3       	in	r24, 0x18	; 24
     58c:	80 61       	ori	r24, 0x10	; 16
     58e:	88 bb       	out	0x18, r24	; 24
     590:	08 95       	ret

00000592 <read_rx_status>:
}
	
	
char read_rx_status(){
	SS_Enable();
     592:	88 b3       	in	r24, 0x18	; 24
     594:	8f 7e       	andi	r24, 0xEF	; 239
     596:	88 bb       	out	0x18, r24	; 24
	char data;
	SPI_MasterTransmit(0xB0);
     598:	80 eb       	ldi	r24, 0xB0	; 176
     59a:	0e 94 dd 02 	call	0x5ba	; 0x5ba <SPI_MasterTransmit>
	data = SPI_MasterReceive();
     59e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <SPI_MasterReceive>
	SS_Disable();
     5a2:	98 b3       	in	r25, 0x18	; 24
     5a4:	90 61       	ori	r25, 0x10	; 16
     5a6:	98 bb       	out	0x18, r25	; 24
	return data;
}
     5a8:	08 95       	ret

000005aa <SPI_master_init>:
#include <util/delay.h>

void SPI_master_init(){
	
	/* Set MOSI and SCK output, all others input */
	DDRB = (1<<DDB5) | (1<<DDB7) | (1<<DDB4);
     5aa:	80 eb       	ldi	r24, 0xB0	; 176
     5ac:	87 bb       	out	0x17, r24	; 23
	//enable SPI, master, set clock rate to fck/16
	SPCR = (1<<SPE) |(1<<MSTR) | (1<<SPR0);
     5ae:	81 e5       	ldi	r24, 0x51	; 81
     5b0:	8d b9       	out	0x0d, r24	; 13
	
	PORTB |= (1<<DDB4);
     5b2:	88 b3       	in	r24, 0x18	; 24
     5b4:	80 61       	ori	r24, 0x10	; 16
     5b6:	88 bb       	out	0x18, r24	; 24
     5b8:	08 95       	ret

000005ba <SPI_MasterTransmit>:
void SPI_MasterTransmit(char cData)
{
	char flush_buffer;
	/* Start transmission */
	//printf("cdata is %c\n", cData);
	SPDR = cData;
     5ba:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
     5bc:	77 9b       	sbis	0x0e, 7	; 14
     5be:	fe cf       	rjmp	.-4      	; 0x5bc <SPI_MasterTransmit+0x2>
	flush_buffer = SPDR;
     5c0:	8f b1       	in	r24, 0x0f	; 15
     5c2:	08 95       	ret

000005c4 <SPI_MasterReceive>:
	
}

char SPI_MasterReceive(){
	SPDR = 0xFF;
     5c4:	8f ef       	ldi	r24, 0xFF	; 255
     5c6:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     5c8:	77 9b       	sbis	0x0e, 7	; 14
     5ca:	fe cf       	rjmp	.-4      	; 0x5c8 <SPI_MasterReceive+0x4>
	return SPDR;
     5cc:	8f b1       	in	r24, 0x0f	; 15
}
     5ce:	08 95       	ret

000005d0 <UART_RxChar>:
	
}

unsigned char UART_RxChar()
{
	while ((UCSR0A & (1 << RXC0)) == 0);/* Wait till data is received */
     5d0:	5f 9b       	sbis	0x0b, 7	; 11
     5d2:	fe cf       	rjmp	.-4      	; 0x5d0 <UART_RxChar>
	return(UDR0);			/* Return the byte*/
     5d4:	8c b1       	in	r24, 0x0c	; 12
}
     5d6:	08 95       	ret

000005d8 <UART_TxChar>:

void UART_TxChar(char ch)
{
	while (! (UCSR0A & (1<<UDRE0)));	/* Wait for empty transmit buffer*/
     5d8:	5d 9b       	sbis	0x0b, 5	; 11
     5da:	fe cf       	rjmp	.-4      	; 0x5d8 <UART_TxChar>
	UDR0 = ch ;
     5dc:	8c b9       	out	0x0c, r24	; 12
     5de:	08 95       	ret

000005e0 <UART_init>:
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)


void UART_init(long USART_BAUDRATE)
{
	UBRR0L = BAUD_PRESCALE;		/* Load lower 8-bits of the baud rate value */
     5e0:	dc 01       	movw	r26, r24
     5e2:	cb 01       	movw	r24, r22
     5e4:	88 0f       	add	r24, r24
     5e6:	99 1f       	adc	r25, r25
     5e8:	aa 1f       	adc	r26, r26
     5ea:	bb 1f       	adc	r27, r27
     5ec:	88 0f       	add	r24, r24
     5ee:	99 1f       	adc	r25, r25
     5f0:	aa 1f       	adc	r26, r26
     5f2:	bb 1f       	adc	r27, r27
     5f4:	9c 01       	movw	r18, r24
     5f6:	ad 01       	movw	r20, r26
     5f8:	22 0f       	add	r18, r18
     5fa:	33 1f       	adc	r19, r19
     5fc:	44 1f       	adc	r20, r20
     5fe:	55 1f       	adc	r21, r21
     600:	22 0f       	add	r18, r18
     602:	33 1f       	adc	r19, r19
     604:	44 1f       	adc	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	70 e0       	ldi	r23, 0x00	; 0
     60c:	8b e4       	ldi	r24, 0x4B	; 75
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 42 03 	call	0x684	; 0x684 <__udivmodsi4>
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	82 0f       	add	r24, r18
     618:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (BAUD_PRESCALE >> 8);	/* Load upper 8-bits*/
     61a:	da 01       	movw	r26, r20
     61c:	c9 01       	movw	r24, r18
     61e:	01 97       	sbiw	r24, 0x01	; 1
     620:	a1 09       	sbc	r26, r1
     622:	b1 09       	sbc	r27, r1
     624:	89 2f       	mov	r24, r25
     626:	9a 2f       	mov	r25, r26
     628:	ab 2f       	mov	r26, r27
     62a:	bb 27       	eor	r27, r27
     62c:	80 bd       	out	0x20, r24	; 32
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);/* Turn on transmission and reception */
     62e:	8a b1       	in	r24, 0x0a	; 10
     630:	88 61       	ori	r24, 0x18	; 24
     632:	8a b9       	out	0x0a, r24	; 10
	UCSR0C |= (1 << URSEL0) | (1<<USBS0) | (3 << UCSZ00);/* Use 8-bit character sizes */
     634:	80 b5       	in	r24, 0x20	; 32
     636:	8e 68       	ori	r24, 0x8E	; 142
     638:	80 bd       	out	0x20, r24	; 32
     63a:	08 95       	ret

0000063c <UART_SendString>:
	while (! (UCSR0A & (1<<UDRE0)));	/* Wait for empty transmit buffer*/
	UDR0 = ch ;
}

void UART_SendString(char *str)
{
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	8c 01       	movw	r16, r24
	unsigned char j=0;
     644:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (str[j]!=0)		/* Send string till null */
     646:	03 c0       	rjmp	.+6      	; 0x64e <UART_SendString+0x12>
	{
		UART_TxChar(str[j]);	
     648:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <UART_TxChar>
		j++;
     64c:	cf 5f       	subi	r28, 0xFF	; 255

void UART_SendString(char *str)
{
	unsigned char j=0;
	
	while (str[j]!=0)		/* Send string till null */
     64e:	f8 01       	movw	r30, r16
     650:	ec 0f       	add	r30, r28
     652:	f1 1d       	adc	r31, r1
     654:	80 81       	ld	r24, Z
     656:	81 11       	cpse	r24, r1
     658:	f7 cf       	rjmp	.-18     	; 0x648 <UART_SendString+0xc>
	{
		UART_TxChar(str[j]);	
		j++;
	}
}
     65a:	cf 91       	pop	r28
     65c:	1f 91       	pop	r17
     65e:	0f 91       	pop	r16
     660:	08 95       	ret

00000662 <alternate_printf>:

void alternate_printf()
{
	UART_init(9600);
     662:	60 e8       	ldi	r22, 0x80	; 128
     664:	75 e2       	ldi	r23, 0x25	; 37
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <UART_init>
	UART_SendString("\n\t UART initialized ");
     66e:	8e e8       	ldi	r24, 0x8E	; 142
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	0e 94 1e 03 	call	0x63c	; 0x63c <UART_SendString>
	
	fdevopen(UART_TxChar,UART_RxChar);	
     676:	68 ee       	ldi	r22, 0xE8	; 232
     678:	72 e0       	ldi	r23, 0x02	; 2
     67a:	8c ee       	ldi	r24, 0xEC	; 236
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <fdevopen>
     682:	08 95       	ret

00000684 <__udivmodsi4>:
     684:	a1 e2       	ldi	r26, 0x21	; 33
     686:	1a 2e       	mov	r1, r26
     688:	aa 1b       	sub	r26, r26
     68a:	bb 1b       	sub	r27, r27
     68c:	fd 01       	movw	r30, r26
     68e:	0d c0       	rjmp	.+26     	; 0x6aa <__udivmodsi4_ep>

00000690 <__udivmodsi4_loop>:
     690:	aa 1f       	adc	r26, r26
     692:	bb 1f       	adc	r27, r27
     694:	ee 1f       	adc	r30, r30
     696:	ff 1f       	adc	r31, r31
     698:	a2 17       	cp	r26, r18
     69a:	b3 07       	cpc	r27, r19
     69c:	e4 07       	cpc	r30, r20
     69e:	f5 07       	cpc	r31, r21
     6a0:	20 f0       	brcs	.+8      	; 0x6aa <__udivmodsi4_ep>
     6a2:	a2 1b       	sub	r26, r18
     6a4:	b3 0b       	sbc	r27, r19
     6a6:	e4 0b       	sbc	r30, r20
     6a8:	f5 0b       	sbc	r31, r21

000006aa <__udivmodsi4_ep>:
     6aa:	66 1f       	adc	r22, r22
     6ac:	77 1f       	adc	r23, r23
     6ae:	88 1f       	adc	r24, r24
     6b0:	99 1f       	adc	r25, r25
     6b2:	1a 94       	dec	r1
     6b4:	69 f7       	brne	.-38     	; 0x690 <__udivmodsi4_loop>
     6b6:	60 95       	com	r22
     6b8:	70 95       	com	r23
     6ba:	80 95       	com	r24
     6bc:	90 95       	com	r25
     6be:	9b 01       	movw	r18, r22
     6c0:	ac 01       	movw	r20, r24
     6c2:	bd 01       	movw	r22, r26
     6c4:	cf 01       	movw	r24, r30
     6c6:	08 95       	ret

000006c8 <malloc>:
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	82 30       	cpi	r24, 0x02	; 2
     6d2:	91 05       	cpc	r25, r1
     6d4:	10 f4       	brcc	.+4      	; 0x6da <malloc+0x12>
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	90 e0       	ldi	r25, 0x00	; 0
     6da:	e0 91 a6 02 	lds	r30, 0x02A6	; 0x8002a6 <__flp>
     6de:	f0 91 a7 02 	lds	r31, 0x02A7	; 0x8002a7 <__flp+0x1>
     6e2:	20 e0       	ldi	r18, 0x00	; 0
     6e4:	30 e0       	ldi	r19, 0x00	; 0
     6e6:	a0 e0       	ldi	r26, 0x00	; 0
     6e8:	b0 e0       	ldi	r27, 0x00	; 0
     6ea:	30 97       	sbiw	r30, 0x00	; 0
     6ec:	19 f1       	breq	.+70     	; 0x734 <malloc+0x6c>
     6ee:	40 81       	ld	r20, Z
     6f0:	51 81       	ldd	r21, Z+1	; 0x01
     6f2:	02 81       	ldd	r16, Z+2	; 0x02
     6f4:	13 81       	ldd	r17, Z+3	; 0x03
     6f6:	48 17       	cp	r20, r24
     6f8:	59 07       	cpc	r21, r25
     6fa:	c8 f0       	brcs	.+50     	; 0x72e <malloc+0x66>
     6fc:	84 17       	cp	r24, r20
     6fe:	95 07       	cpc	r25, r21
     700:	69 f4       	brne	.+26     	; 0x71c <malloc+0x54>
     702:	10 97       	sbiw	r26, 0x00	; 0
     704:	31 f0       	breq	.+12     	; 0x712 <malloc+0x4a>
     706:	12 96       	adiw	r26, 0x02	; 2
     708:	0c 93       	st	X, r16
     70a:	12 97       	sbiw	r26, 0x02	; 2
     70c:	13 96       	adiw	r26, 0x03	; 3
     70e:	1c 93       	st	X, r17
     710:	27 c0       	rjmp	.+78     	; 0x760 <malloc+0x98>
     712:	00 93 a6 02 	sts	0x02A6, r16	; 0x8002a6 <__flp>
     716:	10 93 a7 02 	sts	0x02A7, r17	; 0x8002a7 <__flp+0x1>
     71a:	22 c0       	rjmp	.+68     	; 0x760 <malloc+0x98>
     71c:	21 15       	cp	r18, r1
     71e:	31 05       	cpc	r19, r1
     720:	19 f0       	breq	.+6      	; 0x728 <malloc+0x60>
     722:	42 17       	cp	r20, r18
     724:	53 07       	cpc	r21, r19
     726:	18 f4       	brcc	.+6      	; 0x72e <malloc+0x66>
     728:	9a 01       	movw	r18, r20
     72a:	bd 01       	movw	r22, r26
     72c:	ef 01       	movw	r28, r30
     72e:	df 01       	movw	r26, r30
     730:	f8 01       	movw	r30, r16
     732:	db cf       	rjmp	.-74     	; 0x6ea <malloc+0x22>
     734:	21 15       	cp	r18, r1
     736:	31 05       	cpc	r19, r1
     738:	f9 f0       	breq	.+62     	; 0x778 <malloc+0xb0>
     73a:	28 1b       	sub	r18, r24
     73c:	39 0b       	sbc	r19, r25
     73e:	24 30       	cpi	r18, 0x04	; 4
     740:	31 05       	cpc	r19, r1
     742:	80 f4       	brcc	.+32     	; 0x764 <malloc+0x9c>
     744:	8a 81       	ldd	r24, Y+2	; 0x02
     746:	9b 81       	ldd	r25, Y+3	; 0x03
     748:	61 15       	cp	r22, r1
     74a:	71 05       	cpc	r23, r1
     74c:	21 f0       	breq	.+8      	; 0x756 <malloc+0x8e>
     74e:	fb 01       	movw	r30, r22
     750:	93 83       	std	Z+3, r25	; 0x03
     752:	82 83       	std	Z+2, r24	; 0x02
     754:	04 c0       	rjmp	.+8      	; 0x75e <malloc+0x96>
     756:	90 93 a7 02 	sts	0x02A7, r25	; 0x8002a7 <__flp+0x1>
     75a:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <__flp>
     75e:	fe 01       	movw	r30, r28
     760:	32 96       	adiw	r30, 0x02	; 2
     762:	44 c0       	rjmp	.+136    	; 0x7ec <malloc+0x124>
     764:	fe 01       	movw	r30, r28
     766:	e2 0f       	add	r30, r18
     768:	f3 1f       	adc	r31, r19
     76a:	81 93       	st	Z+, r24
     76c:	91 93       	st	Z+, r25
     76e:	22 50       	subi	r18, 0x02	; 2
     770:	31 09       	sbc	r19, r1
     772:	39 83       	std	Y+1, r19	; 0x01
     774:	28 83       	st	Y, r18
     776:	3a c0       	rjmp	.+116    	; 0x7ec <malloc+0x124>
     778:	20 91 a4 02 	lds	r18, 0x02A4	; 0x8002a4 <__data_end>
     77c:	30 91 a5 02 	lds	r19, 0x02A5	; 0x8002a5 <__data_end+0x1>
     780:	23 2b       	or	r18, r19
     782:	41 f4       	brne	.+16     	; 0x794 <malloc+0xcc>
     784:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
     788:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
     78c:	30 93 a5 02 	sts	0x02A5, r19	; 0x8002a5 <__data_end+0x1>
     790:	20 93 a4 02 	sts	0x02A4, r18	; 0x8002a4 <__data_end>
     794:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     798:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     79c:	21 15       	cp	r18, r1
     79e:	31 05       	cpc	r19, r1
     7a0:	41 f4       	brne	.+16     	; 0x7b2 <malloc+0xea>
     7a2:	2d b7       	in	r18, 0x3d	; 61
     7a4:	3e b7       	in	r19, 0x3e	; 62
     7a6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
     7aa:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
     7ae:	24 1b       	sub	r18, r20
     7b0:	35 0b       	sbc	r19, r21
     7b2:	e0 91 a4 02 	lds	r30, 0x02A4	; 0x8002a4 <__data_end>
     7b6:	f0 91 a5 02 	lds	r31, 0x02A5	; 0x8002a5 <__data_end+0x1>
     7ba:	e2 17       	cp	r30, r18
     7bc:	f3 07       	cpc	r31, r19
     7be:	a0 f4       	brcc	.+40     	; 0x7e8 <malloc+0x120>
     7c0:	2e 1b       	sub	r18, r30
     7c2:	3f 0b       	sbc	r19, r31
     7c4:	28 17       	cp	r18, r24
     7c6:	39 07       	cpc	r19, r25
     7c8:	78 f0       	brcs	.+30     	; 0x7e8 <malloc+0x120>
     7ca:	ac 01       	movw	r20, r24
     7cc:	4e 5f       	subi	r20, 0xFE	; 254
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	24 17       	cp	r18, r20
     7d2:	35 07       	cpc	r19, r21
     7d4:	48 f0       	brcs	.+18     	; 0x7e8 <malloc+0x120>
     7d6:	4e 0f       	add	r20, r30
     7d8:	5f 1f       	adc	r21, r31
     7da:	50 93 a5 02 	sts	0x02A5, r21	; 0x8002a5 <__data_end+0x1>
     7de:	40 93 a4 02 	sts	0x02A4, r20	; 0x8002a4 <__data_end>
     7e2:	81 93       	st	Z+, r24
     7e4:	91 93       	st	Z+, r25
     7e6:	02 c0       	rjmp	.+4      	; 0x7ec <malloc+0x124>
     7e8:	e0 e0       	ldi	r30, 0x00	; 0
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	cf 01       	movw	r24, r30
     7ee:	df 91       	pop	r29
     7f0:	cf 91       	pop	r28
     7f2:	1f 91       	pop	r17
     7f4:	0f 91       	pop	r16
     7f6:	08 95       	ret

000007f8 <free>:
     7f8:	cf 93       	push	r28
     7fa:	df 93       	push	r29
     7fc:	00 97       	sbiw	r24, 0x00	; 0
     7fe:	09 f4       	brne	.+2      	; 0x802 <free+0xa>
     800:	81 c0       	rjmp	.+258    	; 0x904 <free+0x10c>
     802:	fc 01       	movw	r30, r24
     804:	32 97       	sbiw	r30, 0x02	; 2
     806:	13 82       	std	Z+3, r1	; 0x03
     808:	12 82       	std	Z+2, r1	; 0x02
     80a:	a0 91 a6 02 	lds	r26, 0x02A6	; 0x8002a6 <__flp>
     80e:	b0 91 a7 02 	lds	r27, 0x02A7	; 0x8002a7 <__flp+0x1>
     812:	10 97       	sbiw	r26, 0x00	; 0
     814:	81 f4       	brne	.+32     	; 0x836 <free+0x3e>
     816:	20 81       	ld	r18, Z
     818:	31 81       	ldd	r19, Z+1	; 0x01
     81a:	82 0f       	add	r24, r18
     81c:	93 1f       	adc	r25, r19
     81e:	20 91 a4 02 	lds	r18, 0x02A4	; 0x8002a4 <__data_end>
     822:	30 91 a5 02 	lds	r19, 0x02A5	; 0x8002a5 <__data_end+0x1>
     826:	28 17       	cp	r18, r24
     828:	39 07       	cpc	r19, r25
     82a:	51 f5       	brne	.+84     	; 0x880 <free+0x88>
     82c:	f0 93 a5 02 	sts	0x02A5, r31	; 0x8002a5 <__data_end+0x1>
     830:	e0 93 a4 02 	sts	0x02A4, r30	; 0x8002a4 <__data_end>
     834:	67 c0       	rjmp	.+206    	; 0x904 <free+0x10c>
     836:	ed 01       	movw	r28, r26
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	ce 17       	cp	r28, r30
     83e:	df 07       	cpc	r29, r31
     840:	40 f4       	brcc	.+16     	; 0x852 <free+0x5a>
     842:	4a 81       	ldd	r20, Y+2	; 0x02
     844:	5b 81       	ldd	r21, Y+3	; 0x03
     846:	9e 01       	movw	r18, r28
     848:	41 15       	cp	r20, r1
     84a:	51 05       	cpc	r21, r1
     84c:	f1 f0       	breq	.+60     	; 0x88a <free+0x92>
     84e:	ea 01       	movw	r28, r20
     850:	f5 cf       	rjmp	.-22     	; 0x83c <free+0x44>
     852:	d3 83       	std	Z+3, r29	; 0x03
     854:	c2 83       	std	Z+2, r28	; 0x02
     856:	40 81       	ld	r20, Z
     858:	51 81       	ldd	r21, Z+1	; 0x01
     85a:	84 0f       	add	r24, r20
     85c:	95 1f       	adc	r25, r21
     85e:	c8 17       	cp	r28, r24
     860:	d9 07       	cpc	r29, r25
     862:	59 f4       	brne	.+22     	; 0x87a <free+0x82>
     864:	88 81       	ld	r24, Y
     866:	99 81       	ldd	r25, Y+1	; 0x01
     868:	84 0f       	add	r24, r20
     86a:	95 1f       	adc	r25, r21
     86c:	02 96       	adiw	r24, 0x02	; 2
     86e:	91 83       	std	Z+1, r25	; 0x01
     870:	80 83       	st	Z, r24
     872:	8a 81       	ldd	r24, Y+2	; 0x02
     874:	9b 81       	ldd	r25, Y+3	; 0x03
     876:	93 83       	std	Z+3, r25	; 0x03
     878:	82 83       	std	Z+2, r24	; 0x02
     87a:	21 15       	cp	r18, r1
     87c:	31 05       	cpc	r19, r1
     87e:	29 f4       	brne	.+10     	; 0x88a <free+0x92>
     880:	f0 93 a7 02 	sts	0x02A7, r31	; 0x8002a7 <__flp+0x1>
     884:	e0 93 a6 02 	sts	0x02A6, r30	; 0x8002a6 <__flp>
     888:	3d c0       	rjmp	.+122    	; 0x904 <free+0x10c>
     88a:	e9 01       	movw	r28, r18
     88c:	fb 83       	std	Y+3, r31	; 0x03
     88e:	ea 83       	std	Y+2, r30	; 0x02
     890:	49 91       	ld	r20, Y+
     892:	59 91       	ld	r21, Y+
     894:	c4 0f       	add	r28, r20
     896:	d5 1f       	adc	r29, r21
     898:	ec 17       	cp	r30, r28
     89a:	fd 07       	cpc	r31, r29
     89c:	61 f4       	brne	.+24     	; 0x8b6 <free+0xbe>
     89e:	80 81       	ld	r24, Z
     8a0:	91 81       	ldd	r25, Z+1	; 0x01
     8a2:	84 0f       	add	r24, r20
     8a4:	95 1f       	adc	r25, r21
     8a6:	02 96       	adiw	r24, 0x02	; 2
     8a8:	e9 01       	movw	r28, r18
     8aa:	99 83       	std	Y+1, r25	; 0x01
     8ac:	88 83       	st	Y, r24
     8ae:	82 81       	ldd	r24, Z+2	; 0x02
     8b0:	93 81       	ldd	r25, Z+3	; 0x03
     8b2:	9b 83       	std	Y+3, r25	; 0x03
     8b4:	8a 83       	std	Y+2, r24	; 0x02
     8b6:	e0 e0       	ldi	r30, 0x00	; 0
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	12 96       	adiw	r26, 0x02	; 2
     8bc:	8d 91       	ld	r24, X+
     8be:	9c 91       	ld	r25, X
     8c0:	13 97       	sbiw	r26, 0x03	; 3
     8c2:	00 97       	sbiw	r24, 0x00	; 0
     8c4:	19 f0       	breq	.+6      	; 0x8cc <free+0xd4>
     8c6:	fd 01       	movw	r30, r26
     8c8:	dc 01       	movw	r26, r24
     8ca:	f7 cf       	rjmp	.-18     	; 0x8ba <free+0xc2>
     8cc:	8d 91       	ld	r24, X+
     8ce:	9c 91       	ld	r25, X
     8d0:	11 97       	sbiw	r26, 0x01	; 1
     8d2:	9d 01       	movw	r18, r26
     8d4:	2e 5f       	subi	r18, 0xFE	; 254
     8d6:	3f 4f       	sbci	r19, 0xFF	; 255
     8d8:	82 0f       	add	r24, r18
     8da:	93 1f       	adc	r25, r19
     8dc:	20 91 a4 02 	lds	r18, 0x02A4	; 0x8002a4 <__data_end>
     8e0:	30 91 a5 02 	lds	r19, 0x02A5	; 0x8002a5 <__data_end+0x1>
     8e4:	28 17       	cp	r18, r24
     8e6:	39 07       	cpc	r19, r25
     8e8:	69 f4       	brne	.+26     	; 0x904 <free+0x10c>
     8ea:	30 97       	sbiw	r30, 0x00	; 0
     8ec:	29 f4       	brne	.+10     	; 0x8f8 <free+0x100>
     8ee:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <__flp+0x1>
     8f2:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <__flp>
     8f6:	02 c0       	rjmp	.+4      	; 0x8fc <free+0x104>
     8f8:	13 82       	std	Z+3, r1	; 0x03
     8fa:	12 82       	std	Z+2, r1	; 0x02
     8fc:	b0 93 a5 02 	sts	0x02A5, r27	; 0x8002a5 <__data_end+0x1>
     900:	a0 93 a4 02 	sts	0x02A4, r26	; 0x8002a4 <__data_end>
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <do_rand>:
     90a:	8f 92       	push	r8
     90c:	9f 92       	push	r9
     90e:	af 92       	push	r10
     910:	bf 92       	push	r11
     912:	cf 92       	push	r12
     914:	df 92       	push	r13
     916:	ef 92       	push	r14
     918:	ff 92       	push	r15
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	ec 01       	movw	r28, r24
     920:	68 81       	ld	r22, Y
     922:	79 81       	ldd	r23, Y+1	; 0x01
     924:	8a 81       	ldd	r24, Y+2	; 0x02
     926:	9b 81       	ldd	r25, Y+3	; 0x03
     928:	61 15       	cp	r22, r1
     92a:	71 05       	cpc	r23, r1
     92c:	81 05       	cpc	r24, r1
     92e:	91 05       	cpc	r25, r1
     930:	21 f4       	brne	.+8      	; 0x93a <do_rand+0x30>
     932:	64 e2       	ldi	r22, 0x24	; 36
     934:	79 ed       	ldi	r23, 0xD9	; 217
     936:	8b e5       	ldi	r24, 0x5B	; 91
     938:	97 e0       	ldi	r25, 0x07	; 7
     93a:	2d e1       	ldi	r18, 0x1D	; 29
     93c:	33 ef       	ldi	r19, 0xF3	; 243
     93e:	41 e0       	ldi	r20, 0x01	; 1
     940:	50 e0       	ldi	r21, 0x00	; 0
     942:	0e 94 26 08 	call	0x104c	; 0x104c <__divmodsi4>
     946:	49 01       	movw	r8, r18
     948:	5a 01       	movw	r10, r20
     94a:	9b 01       	movw	r18, r22
     94c:	ac 01       	movw	r20, r24
     94e:	a7 ea       	ldi	r26, 0xA7	; 167
     950:	b1 e4       	ldi	r27, 0x41	; 65
     952:	0e 94 45 08 	call	0x108a	; 0x108a <__muluhisi3>
     956:	6b 01       	movw	r12, r22
     958:	7c 01       	movw	r14, r24
     95a:	ac ee       	ldi	r26, 0xEC	; 236
     95c:	b4 ef       	ldi	r27, 0xF4	; 244
     95e:	a5 01       	movw	r20, r10
     960:	94 01       	movw	r18, r8
     962:	0e 94 53 08 	call	0x10a6	; 0x10a6 <__mulohisi3>
     966:	dc 01       	movw	r26, r24
     968:	cb 01       	movw	r24, r22
     96a:	8c 0d       	add	r24, r12
     96c:	9d 1d       	adc	r25, r13
     96e:	ae 1d       	adc	r26, r14
     970:	bf 1d       	adc	r27, r15
     972:	b7 ff       	sbrs	r27, 7
     974:	03 c0       	rjmp	.+6      	; 0x97c <do_rand+0x72>
     976:	01 97       	sbiw	r24, 0x01	; 1
     978:	a1 09       	sbc	r26, r1
     97a:	b0 48       	sbci	r27, 0x80	; 128
     97c:	88 83       	st	Y, r24
     97e:	99 83       	std	Y+1, r25	; 0x01
     980:	aa 83       	std	Y+2, r26	; 0x02
     982:	bb 83       	std	Y+3, r27	; 0x03
     984:	9f 77       	andi	r25, 0x7F	; 127
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	ff 90       	pop	r15
     98c:	ef 90       	pop	r14
     98e:	df 90       	pop	r13
     990:	cf 90       	pop	r12
     992:	bf 90       	pop	r11
     994:	af 90       	pop	r10
     996:	9f 90       	pop	r9
     998:	8f 90       	pop	r8
     99a:	08 95       	ret

0000099c <rand_r>:
     99c:	0e 94 85 04 	call	0x90a	; 0x90a <do_rand>
     9a0:	08 95       	ret

000009a2 <rand>:
     9a2:	86 e0       	ldi	r24, 0x06	; 6
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	0e 94 85 04 	call	0x90a	; 0x90a <do_rand>
     9aa:	08 95       	ret

000009ac <srand>:
     9ac:	a0 e0       	ldi	r26, 0x00	; 0
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
     9b4:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
     9b8:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
     9bc:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
     9c0:	08 95       	ret

000009c2 <fdevopen>:
     9c2:	0f 93       	push	r16
     9c4:	1f 93       	push	r17
     9c6:	cf 93       	push	r28
     9c8:	df 93       	push	r29
     9ca:	00 97       	sbiw	r24, 0x00	; 0
     9cc:	31 f4       	brne	.+12     	; 0x9da <fdevopen+0x18>
     9ce:	61 15       	cp	r22, r1
     9d0:	71 05       	cpc	r23, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <fdevopen+0x18>
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	3a c0       	rjmp	.+116    	; 0xa4e <fdevopen+0x8c>
     9da:	8b 01       	movw	r16, r22
     9dc:	ec 01       	movw	r28, r24
     9de:	6e e0       	ldi	r22, 0x0E	; 14
     9e0:	70 e0       	ldi	r23, 0x00	; 0
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 53 07 	call	0xea6	; 0xea6 <calloc>
     9ea:	fc 01       	movw	r30, r24
     9ec:	89 2b       	or	r24, r25
     9ee:	91 f3       	breq	.-28     	; 0x9d4 <fdevopen+0x12>
     9f0:	80 e8       	ldi	r24, 0x80	; 128
     9f2:	83 83       	std	Z+3, r24	; 0x03
     9f4:	01 15       	cp	r16, r1
     9f6:	11 05       	cpc	r17, r1
     9f8:	71 f0       	breq	.+28     	; 0xa16 <fdevopen+0x54>
     9fa:	13 87       	std	Z+11, r17	; 0x0b
     9fc:	02 87       	std	Z+10, r16	; 0x0a
     9fe:	81 e8       	ldi	r24, 0x81	; 129
     a00:	83 83       	std	Z+3, r24	; 0x03
     a02:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <__iob>
     a06:	90 91 a9 02 	lds	r25, 0x02A9	; 0x8002a9 <__iob+0x1>
     a0a:	89 2b       	or	r24, r25
     a0c:	21 f4       	brne	.+8      	; 0xa16 <fdevopen+0x54>
     a0e:	f0 93 a9 02 	sts	0x02A9, r31	; 0x8002a9 <__iob+0x1>
     a12:	e0 93 a8 02 	sts	0x02A8, r30	; 0x8002a8 <__iob>
     a16:	20 97       	sbiw	r28, 0x00	; 0
     a18:	c9 f0       	breq	.+50     	; 0xa4c <fdevopen+0x8a>
     a1a:	d1 87       	std	Z+9, r29	; 0x09
     a1c:	c0 87       	std	Z+8, r28	; 0x08
     a1e:	83 81       	ldd	r24, Z+3	; 0x03
     a20:	82 60       	ori	r24, 0x02	; 2
     a22:	83 83       	std	Z+3, r24	; 0x03
     a24:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__iob+0x2>
     a28:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__iob+0x3>
     a2c:	89 2b       	or	r24, r25
     a2e:	71 f4       	brne	.+28     	; 0xa4c <fdevopen+0x8a>
     a30:	f0 93 ab 02 	sts	0x02AB, r31	; 0x8002ab <__iob+0x3>
     a34:	e0 93 aa 02 	sts	0x02AA, r30	; 0x8002aa <__iob+0x2>
     a38:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <__iob+0x4>
     a3c:	90 91 ad 02 	lds	r25, 0x02AD	; 0x8002ad <__iob+0x5>
     a40:	89 2b       	or	r24, r25
     a42:	21 f4       	brne	.+8      	; 0xa4c <fdevopen+0x8a>
     a44:	f0 93 ad 02 	sts	0x02AD, r31	; 0x8002ad <__iob+0x5>
     a48:	e0 93 ac 02 	sts	0x02AC, r30	; 0x8002ac <__iob+0x4>
     a4c:	cf 01       	movw	r24, r30
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	08 95       	ret

00000a58 <printf>:
     a58:	a0 e0       	ldi	r26, 0x00	; 0
     a5a:	b0 e0       	ldi	r27, 0x00	; 0
     a5c:	e2 e3       	ldi	r30, 0x32	; 50
     a5e:	f5 e0       	ldi	r31, 0x05	; 5
     a60:	0c 94 68 08 	jmp	0x10d0	; 0x10d0 <__prologue_saves__+0x20>
     a64:	ae 01       	movw	r20, r28
     a66:	4b 5f       	subi	r20, 0xFB	; 251
     a68:	5f 4f       	sbci	r21, 0xFF	; 255
     a6a:	fa 01       	movw	r30, r20
     a6c:	61 91       	ld	r22, Z+
     a6e:	71 91       	ld	r23, Z+
     a70:	af 01       	movw	r20, r30
     a72:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <__iob+0x2>
     a76:	90 91 ab 02 	lds	r25, 0x02AB	; 0x8002ab <__iob+0x3>
     a7a:	0e 94 72 05 	call	0xae4	; 0xae4 <vfprintf>
     a7e:	e2 e0       	ldi	r30, 0x02	; 2
     a80:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__epilogue_restores__+0x20>

00000a84 <puts>:
     a84:	0f 93       	push	r16
     a86:	1f 93       	push	r17
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	e0 91 aa 02 	lds	r30, 0x02AA	; 0x8002aa <__iob+0x2>
     a90:	f0 91 ab 02 	lds	r31, 0x02AB	; 0x8002ab <__iob+0x3>
     a94:	23 81       	ldd	r18, Z+3	; 0x03
     a96:	21 ff       	sbrs	r18, 1
     a98:	1b c0       	rjmp	.+54     	; 0xad0 <puts+0x4c>
     a9a:	8c 01       	movw	r16, r24
     a9c:	d0 e0       	ldi	r29, 0x00	; 0
     a9e:	c0 e0       	ldi	r28, 0x00	; 0
     aa0:	f8 01       	movw	r30, r16
     aa2:	81 91       	ld	r24, Z+
     aa4:	8f 01       	movw	r16, r30
     aa6:	60 91 aa 02 	lds	r22, 0x02AA	; 0x8002aa <__iob+0x2>
     aaa:	70 91 ab 02 	lds	r23, 0x02AB	; 0x8002ab <__iob+0x3>
     aae:	db 01       	movw	r26, r22
     ab0:	18 96       	adiw	r26, 0x08	; 8
     ab2:	ed 91       	ld	r30, X+
     ab4:	fc 91       	ld	r31, X
     ab6:	19 97       	sbiw	r26, 0x09	; 9
     ab8:	88 23       	and	r24, r24
     aba:	31 f0       	breq	.+12     	; 0xac8 <puts+0x44>
     abc:	09 95       	icall
     abe:	89 2b       	or	r24, r25
     ac0:	79 f3       	breq	.-34     	; 0xaa0 <puts+0x1c>
     ac2:	df ef       	ldi	r29, 0xFF	; 255
     ac4:	cf ef       	ldi	r28, 0xFF	; 255
     ac6:	ec cf       	rjmp	.-40     	; 0xaa0 <puts+0x1c>
     ac8:	8a e0       	ldi	r24, 0x0A	; 10
     aca:	09 95       	icall
     acc:	89 2b       	or	r24, r25
     ace:	19 f0       	breq	.+6      	; 0xad6 <puts+0x52>
     ad0:	8f ef       	ldi	r24, 0xFF	; 255
     ad2:	9f ef       	ldi	r25, 0xFF	; 255
     ad4:	02 c0       	rjmp	.+4      	; 0xada <puts+0x56>
     ad6:	8d 2f       	mov	r24, r29
     ad8:	9c 2f       	mov	r25, r28
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	08 95       	ret

00000ae4 <vfprintf>:
     ae4:	ab e0       	ldi	r26, 0x0B	; 11
     ae6:	b0 e0       	ldi	r27, 0x00	; 0
     ae8:	e8 e7       	ldi	r30, 0x78	; 120
     aea:	f5 e0       	ldi	r31, 0x05	; 5
     aec:	0c 94 58 08 	jmp	0x10b0	; 0x10b0 <__prologue_saves__>
     af0:	6c 01       	movw	r12, r24
     af2:	7b 01       	movw	r14, r22
     af4:	8a 01       	movw	r16, r20
     af6:	fc 01       	movw	r30, r24
     af8:	17 82       	std	Z+7, r1	; 0x07
     afa:	16 82       	std	Z+6, r1	; 0x06
     afc:	83 81       	ldd	r24, Z+3	; 0x03
     afe:	81 ff       	sbrs	r24, 1
     b00:	cc c1       	rjmp	.+920    	; 0xe9a <vfprintf+0x3b6>
     b02:	ce 01       	movw	r24, r28
     b04:	01 96       	adiw	r24, 0x01	; 1
     b06:	3c 01       	movw	r6, r24
     b08:	f6 01       	movw	r30, r12
     b0a:	93 81       	ldd	r25, Z+3	; 0x03
     b0c:	f7 01       	movw	r30, r14
     b0e:	93 fd       	sbrc	r25, 3
     b10:	85 91       	lpm	r24, Z+
     b12:	93 ff       	sbrs	r25, 3
     b14:	81 91       	ld	r24, Z+
     b16:	7f 01       	movw	r14, r30
     b18:	88 23       	and	r24, r24
     b1a:	09 f4       	brne	.+2      	; 0xb1e <vfprintf+0x3a>
     b1c:	ba c1       	rjmp	.+884    	; 0xe92 <vfprintf+0x3ae>
     b1e:	85 32       	cpi	r24, 0x25	; 37
     b20:	39 f4       	brne	.+14     	; 0xb30 <vfprintf+0x4c>
     b22:	93 fd       	sbrc	r25, 3
     b24:	85 91       	lpm	r24, Z+
     b26:	93 ff       	sbrs	r25, 3
     b28:	81 91       	ld	r24, Z+
     b2a:	7f 01       	movw	r14, r30
     b2c:	85 32       	cpi	r24, 0x25	; 37
     b2e:	29 f4       	brne	.+10     	; 0xb3a <vfprintf+0x56>
     b30:	b6 01       	movw	r22, r12
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 8c 07 	call	0xf18	; 0xf18 <fputc>
     b38:	e7 cf       	rjmp	.-50     	; 0xb08 <vfprintf+0x24>
     b3a:	91 2c       	mov	r9, r1
     b3c:	21 2c       	mov	r2, r1
     b3e:	31 2c       	mov	r3, r1
     b40:	ff e1       	ldi	r31, 0x1F	; 31
     b42:	f3 15       	cp	r31, r3
     b44:	d8 f0       	brcs	.+54     	; 0xb7c <vfprintf+0x98>
     b46:	8b 32       	cpi	r24, 0x2B	; 43
     b48:	79 f0       	breq	.+30     	; 0xb68 <vfprintf+0x84>
     b4a:	38 f4       	brcc	.+14     	; 0xb5a <vfprintf+0x76>
     b4c:	80 32       	cpi	r24, 0x20	; 32
     b4e:	79 f0       	breq	.+30     	; 0xb6e <vfprintf+0x8a>
     b50:	83 32       	cpi	r24, 0x23	; 35
     b52:	a1 f4       	brne	.+40     	; 0xb7c <vfprintf+0x98>
     b54:	23 2d       	mov	r18, r3
     b56:	20 61       	ori	r18, 0x10	; 16
     b58:	1d c0       	rjmp	.+58     	; 0xb94 <vfprintf+0xb0>
     b5a:	8d 32       	cpi	r24, 0x2D	; 45
     b5c:	61 f0       	breq	.+24     	; 0xb76 <vfprintf+0x92>
     b5e:	80 33       	cpi	r24, 0x30	; 48
     b60:	69 f4       	brne	.+26     	; 0xb7c <vfprintf+0x98>
     b62:	23 2d       	mov	r18, r3
     b64:	21 60       	ori	r18, 0x01	; 1
     b66:	16 c0       	rjmp	.+44     	; 0xb94 <vfprintf+0xb0>
     b68:	83 2d       	mov	r24, r3
     b6a:	82 60       	ori	r24, 0x02	; 2
     b6c:	38 2e       	mov	r3, r24
     b6e:	e3 2d       	mov	r30, r3
     b70:	e4 60       	ori	r30, 0x04	; 4
     b72:	3e 2e       	mov	r3, r30
     b74:	2a c0       	rjmp	.+84     	; 0xbca <vfprintf+0xe6>
     b76:	f3 2d       	mov	r31, r3
     b78:	f8 60       	ori	r31, 0x08	; 8
     b7a:	1d c0       	rjmp	.+58     	; 0xbb6 <vfprintf+0xd2>
     b7c:	37 fc       	sbrc	r3, 7
     b7e:	2d c0       	rjmp	.+90     	; 0xbda <vfprintf+0xf6>
     b80:	20 ed       	ldi	r18, 0xD0	; 208
     b82:	28 0f       	add	r18, r24
     b84:	2a 30       	cpi	r18, 0x0A	; 10
     b86:	40 f0       	brcs	.+16     	; 0xb98 <vfprintf+0xb4>
     b88:	8e 32       	cpi	r24, 0x2E	; 46
     b8a:	b9 f4       	brne	.+46     	; 0xbba <vfprintf+0xd6>
     b8c:	36 fc       	sbrc	r3, 6
     b8e:	81 c1       	rjmp	.+770    	; 0xe92 <vfprintf+0x3ae>
     b90:	23 2d       	mov	r18, r3
     b92:	20 64       	ori	r18, 0x40	; 64
     b94:	32 2e       	mov	r3, r18
     b96:	19 c0       	rjmp	.+50     	; 0xbca <vfprintf+0xe6>
     b98:	36 fe       	sbrs	r3, 6
     b9a:	06 c0       	rjmp	.+12     	; 0xba8 <vfprintf+0xc4>
     b9c:	8a e0       	ldi	r24, 0x0A	; 10
     b9e:	98 9e       	mul	r9, r24
     ba0:	20 0d       	add	r18, r0
     ba2:	11 24       	eor	r1, r1
     ba4:	92 2e       	mov	r9, r18
     ba6:	11 c0       	rjmp	.+34     	; 0xbca <vfprintf+0xe6>
     ba8:	ea e0       	ldi	r30, 0x0A	; 10
     baa:	2e 9e       	mul	r2, r30
     bac:	20 0d       	add	r18, r0
     bae:	11 24       	eor	r1, r1
     bb0:	22 2e       	mov	r2, r18
     bb2:	f3 2d       	mov	r31, r3
     bb4:	f0 62       	ori	r31, 0x20	; 32
     bb6:	3f 2e       	mov	r3, r31
     bb8:	08 c0       	rjmp	.+16     	; 0xbca <vfprintf+0xe6>
     bba:	8c 36       	cpi	r24, 0x6C	; 108
     bbc:	21 f4       	brne	.+8      	; 0xbc6 <vfprintf+0xe2>
     bbe:	83 2d       	mov	r24, r3
     bc0:	80 68       	ori	r24, 0x80	; 128
     bc2:	38 2e       	mov	r3, r24
     bc4:	02 c0       	rjmp	.+4      	; 0xbca <vfprintf+0xe6>
     bc6:	88 36       	cpi	r24, 0x68	; 104
     bc8:	41 f4       	brne	.+16     	; 0xbda <vfprintf+0xf6>
     bca:	f7 01       	movw	r30, r14
     bcc:	93 fd       	sbrc	r25, 3
     bce:	85 91       	lpm	r24, Z+
     bd0:	93 ff       	sbrs	r25, 3
     bd2:	81 91       	ld	r24, Z+
     bd4:	7f 01       	movw	r14, r30
     bd6:	81 11       	cpse	r24, r1
     bd8:	b3 cf       	rjmp	.-154    	; 0xb40 <vfprintf+0x5c>
     bda:	98 2f       	mov	r25, r24
     bdc:	9f 7d       	andi	r25, 0xDF	; 223
     bde:	95 54       	subi	r25, 0x45	; 69
     be0:	93 30       	cpi	r25, 0x03	; 3
     be2:	28 f4       	brcc	.+10     	; 0xbee <vfprintf+0x10a>
     be4:	0c 5f       	subi	r16, 0xFC	; 252
     be6:	1f 4f       	sbci	r17, 0xFF	; 255
     be8:	9f e3       	ldi	r25, 0x3F	; 63
     bea:	99 83       	std	Y+1, r25	; 0x01
     bec:	0d c0       	rjmp	.+26     	; 0xc08 <vfprintf+0x124>
     bee:	83 36       	cpi	r24, 0x63	; 99
     bf0:	31 f0       	breq	.+12     	; 0xbfe <vfprintf+0x11a>
     bf2:	83 37       	cpi	r24, 0x73	; 115
     bf4:	71 f0       	breq	.+28     	; 0xc12 <vfprintf+0x12e>
     bf6:	83 35       	cpi	r24, 0x53	; 83
     bf8:	09 f0       	breq	.+2      	; 0xbfc <vfprintf+0x118>
     bfa:	59 c0       	rjmp	.+178    	; 0xcae <vfprintf+0x1ca>
     bfc:	21 c0       	rjmp	.+66     	; 0xc40 <vfprintf+0x15c>
     bfe:	f8 01       	movw	r30, r16
     c00:	80 81       	ld	r24, Z
     c02:	89 83       	std	Y+1, r24	; 0x01
     c04:	0e 5f       	subi	r16, 0xFE	; 254
     c06:	1f 4f       	sbci	r17, 0xFF	; 255
     c08:	88 24       	eor	r8, r8
     c0a:	83 94       	inc	r8
     c0c:	91 2c       	mov	r9, r1
     c0e:	53 01       	movw	r10, r6
     c10:	13 c0       	rjmp	.+38     	; 0xc38 <vfprintf+0x154>
     c12:	28 01       	movw	r4, r16
     c14:	f2 e0       	ldi	r31, 0x02	; 2
     c16:	4f 0e       	add	r4, r31
     c18:	51 1c       	adc	r5, r1
     c1a:	f8 01       	movw	r30, r16
     c1c:	a0 80       	ld	r10, Z
     c1e:	b1 80       	ldd	r11, Z+1	; 0x01
     c20:	36 fe       	sbrs	r3, 6
     c22:	03 c0       	rjmp	.+6      	; 0xc2a <vfprintf+0x146>
     c24:	69 2d       	mov	r22, r9
     c26:	70 e0       	ldi	r23, 0x00	; 0
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <vfprintf+0x14a>
     c2a:	6f ef       	ldi	r22, 0xFF	; 255
     c2c:	7f ef       	ldi	r23, 0xFF	; 255
     c2e:	c5 01       	movw	r24, r10
     c30:	0e 94 81 07 	call	0xf02	; 0xf02 <strnlen>
     c34:	4c 01       	movw	r8, r24
     c36:	82 01       	movw	r16, r4
     c38:	f3 2d       	mov	r31, r3
     c3a:	ff 77       	andi	r31, 0x7F	; 127
     c3c:	3f 2e       	mov	r3, r31
     c3e:	16 c0       	rjmp	.+44     	; 0xc6c <vfprintf+0x188>
     c40:	28 01       	movw	r4, r16
     c42:	22 e0       	ldi	r18, 0x02	; 2
     c44:	42 0e       	add	r4, r18
     c46:	51 1c       	adc	r5, r1
     c48:	f8 01       	movw	r30, r16
     c4a:	a0 80       	ld	r10, Z
     c4c:	b1 80       	ldd	r11, Z+1	; 0x01
     c4e:	36 fe       	sbrs	r3, 6
     c50:	03 c0       	rjmp	.+6      	; 0xc58 <vfprintf+0x174>
     c52:	69 2d       	mov	r22, r9
     c54:	70 e0       	ldi	r23, 0x00	; 0
     c56:	02 c0       	rjmp	.+4      	; 0xc5c <vfprintf+0x178>
     c58:	6f ef       	ldi	r22, 0xFF	; 255
     c5a:	7f ef       	ldi	r23, 0xFF	; 255
     c5c:	c5 01       	movw	r24, r10
     c5e:	0e 94 6f 07 	call	0xede	; 0xede <strnlen_P>
     c62:	4c 01       	movw	r8, r24
     c64:	f3 2d       	mov	r31, r3
     c66:	f0 68       	ori	r31, 0x80	; 128
     c68:	3f 2e       	mov	r3, r31
     c6a:	82 01       	movw	r16, r4
     c6c:	33 fc       	sbrc	r3, 3
     c6e:	1b c0       	rjmp	.+54     	; 0xca6 <vfprintf+0x1c2>
     c70:	82 2d       	mov	r24, r2
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	88 16       	cp	r8, r24
     c76:	99 06       	cpc	r9, r25
     c78:	b0 f4       	brcc	.+44     	; 0xca6 <vfprintf+0x1c2>
     c7a:	b6 01       	movw	r22, r12
     c7c:	80 e2       	ldi	r24, 0x20	; 32
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	0e 94 8c 07 	call	0xf18	; 0xf18 <fputc>
     c84:	2a 94       	dec	r2
     c86:	f4 cf       	rjmp	.-24     	; 0xc70 <vfprintf+0x18c>
     c88:	f5 01       	movw	r30, r10
     c8a:	37 fc       	sbrc	r3, 7
     c8c:	85 91       	lpm	r24, Z+
     c8e:	37 fe       	sbrs	r3, 7
     c90:	81 91       	ld	r24, Z+
     c92:	5f 01       	movw	r10, r30
     c94:	b6 01       	movw	r22, r12
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 8c 07 	call	0xf18	; 0xf18 <fputc>
     c9c:	21 10       	cpse	r2, r1
     c9e:	2a 94       	dec	r2
     ca0:	21 e0       	ldi	r18, 0x01	; 1
     ca2:	82 1a       	sub	r8, r18
     ca4:	91 08       	sbc	r9, r1
     ca6:	81 14       	cp	r8, r1
     ca8:	91 04       	cpc	r9, r1
     caa:	71 f7       	brne	.-36     	; 0xc88 <vfprintf+0x1a4>
     cac:	e8 c0       	rjmp	.+464    	; 0xe7e <vfprintf+0x39a>
     cae:	84 36       	cpi	r24, 0x64	; 100
     cb0:	11 f0       	breq	.+4      	; 0xcb6 <vfprintf+0x1d2>
     cb2:	89 36       	cpi	r24, 0x69	; 105
     cb4:	41 f5       	brne	.+80     	; 0xd06 <vfprintf+0x222>
     cb6:	f8 01       	movw	r30, r16
     cb8:	37 fe       	sbrs	r3, 7
     cba:	07 c0       	rjmp	.+14     	; 0xcca <vfprintf+0x1e6>
     cbc:	60 81       	ld	r22, Z
     cbe:	71 81       	ldd	r23, Z+1	; 0x01
     cc0:	82 81       	ldd	r24, Z+2	; 0x02
     cc2:	93 81       	ldd	r25, Z+3	; 0x03
     cc4:	0c 5f       	subi	r16, 0xFC	; 252
     cc6:	1f 4f       	sbci	r17, 0xFF	; 255
     cc8:	08 c0       	rjmp	.+16     	; 0xcda <vfprintf+0x1f6>
     cca:	60 81       	ld	r22, Z
     ccc:	71 81       	ldd	r23, Z+1	; 0x01
     cce:	07 2e       	mov	r0, r23
     cd0:	00 0c       	add	r0, r0
     cd2:	88 0b       	sbc	r24, r24
     cd4:	99 0b       	sbc	r25, r25
     cd6:	0e 5f       	subi	r16, 0xFE	; 254
     cd8:	1f 4f       	sbci	r17, 0xFF	; 255
     cda:	f3 2d       	mov	r31, r3
     cdc:	ff 76       	andi	r31, 0x6F	; 111
     cde:	3f 2e       	mov	r3, r31
     ce0:	97 ff       	sbrs	r25, 7
     ce2:	09 c0       	rjmp	.+18     	; 0xcf6 <vfprintf+0x212>
     ce4:	90 95       	com	r25
     ce6:	80 95       	com	r24
     ce8:	70 95       	com	r23
     cea:	61 95       	neg	r22
     cec:	7f 4f       	sbci	r23, 0xFF	; 255
     cee:	8f 4f       	sbci	r24, 0xFF	; 255
     cf0:	9f 4f       	sbci	r25, 0xFF	; 255
     cf2:	f0 68       	ori	r31, 0x80	; 128
     cf4:	3f 2e       	mov	r3, r31
     cf6:	2a e0       	ldi	r18, 0x0A	; 10
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	a3 01       	movw	r20, r6
     cfc:	0e 94 c8 07 	call	0xf90	; 0xf90 <__ultoa_invert>
     d00:	88 2e       	mov	r8, r24
     d02:	86 18       	sub	r8, r6
     d04:	45 c0       	rjmp	.+138    	; 0xd90 <vfprintf+0x2ac>
     d06:	85 37       	cpi	r24, 0x75	; 117
     d08:	31 f4       	brne	.+12     	; 0xd16 <vfprintf+0x232>
     d0a:	23 2d       	mov	r18, r3
     d0c:	2f 7e       	andi	r18, 0xEF	; 239
     d0e:	b2 2e       	mov	r11, r18
     d10:	2a e0       	ldi	r18, 0x0A	; 10
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	25 c0       	rjmp	.+74     	; 0xd60 <vfprintf+0x27c>
     d16:	93 2d       	mov	r25, r3
     d18:	99 7f       	andi	r25, 0xF9	; 249
     d1a:	b9 2e       	mov	r11, r25
     d1c:	8f 36       	cpi	r24, 0x6F	; 111
     d1e:	c1 f0       	breq	.+48     	; 0xd50 <vfprintf+0x26c>
     d20:	18 f4       	brcc	.+6      	; 0xd28 <vfprintf+0x244>
     d22:	88 35       	cpi	r24, 0x58	; 88
     d24:	79 f0       	breq	.+30     	; 0xd44 <vfprintf+0x260>
     d26:	b5 c0       	rjmp	.+362    	; 0xe92 <vfprintf+0x3ae>
     d28:	80 37       	cpi	r24, 0x70	; 112
     d2a:	19 f0       	breq	.+6      	; 0xd32 <vfprintf+0x24e>
     d2c:	88 37       	cpi	r24, 0x78	; 120
     d2e:	21 f0       	breq	.+8      	; 0xd38 <vfprintf+0x254>
     d30:	b0 c0       	rjmp	.+352    	; 0xe92 <vfprintf+0x3ae>
     d32:	e9 2f       	mov	r30, r25
     d34:	e0 61       	ori	r30, 0x10	; 16
     d36:	be 2e       	mov	r11, r30
     d38:	b4 fe       	sbrs	r11, 4
     d3a:	0d c0       	rjmp	.+26     	; 0xd56 <vfprintf+0x272>
     d3c:	fb 2d       	mov	r31, r11
     d3e:	f4 60       	ori	r31, 0x04	; 4
     d40:	bf 2e       	mov	r11, r31
     d42:	09 c0       	rjmp	.+18     	; 0xd56 <vfprintf+0x272>
     d44:	34 fe       	sbrs	r3, 4
     d46:	0a c0       	rjmp	.+20     	; 0xd5c <vfprintf+0x278>
     d48:	29 2f       	mov	r18, r25
     d4a:	26 60       	ori	r18, 0x06	; 6
     d4c:	b2 2e       	mov	r11, r18
     d4e:	06 c0       	rjmp	.+12     	; 0xd5c <vfprintf+0x278>
     d50:	28 e0       	ldi	r18, 0x08	; 8
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <vfprintf+0x27c>
     d56:	20 e1       	ldi	r18, 0x10	; 16
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <vfprintf+0x27c>
     d5c:	20 e1       	ldi	r18, 0x10	; 16
     d5e:	32 e0       	ldi	r19, 0x02	; 2
     d60:	f8 01       	movw	r30, r16
     d62:	b7 fe       	sbrs	r11, 7
     d64:	07 c0       	rjmp	.+14     	; 0xd74 <vfprintf+0x290>
     d66:	60 81       	ld	r22, Z
     d68:	71 81       	ldd	r23, Z+1	; 0x01
     d6a:	82 81       	ldd	r24, Z+2	; 0x02
     d6c:	93 81       	ldd	r25, Z+3	; 0x03
     d6e:	0c 5f       	subi	r16, 0xFC	; 252
     d70:	1f 4f       	sbci	r17, 0xFF	; 255
     d72:	06 c0       	rjmp	.+12     	; 0xd80 <vfprintf+0x29c>
     d74:	60 81       	ld	r22, Z
     d76:	71 81       	ldd	r23, Z+1	; 0x01
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	0e 5f       	subi	r16, 0xFE	; 254
     d7e:	1f 4f       	sbci	r17, 0xFF	; 255
     d80:	a3 01       	movw	r20, r6
     d82:	0e 94 c8 07 	call	0xf90	; 0xf90 <__ultoa_invert>
     d86:	88 2e       	mov	r8, r24
     d88:	86 18       	sub	r8, r6
     d8a:	fb 2d       	mov	r31, r11
     d8c:	ff 77       	andi	r31, 0x7F	; 127
     d8e:	3f 2e       	mov	r3, r31
     d90:	36 fe       	sbrs	r3, 6
     d92:	0d c0       	rjmp	.+26     	; 0xdae <vfprintf+0x2ca>
     d94:	23 2d       	mov	r18, r3
     d96:	2e 7f       	andi	r18, 0xFE	; 254
     d98:	a2 2e       	mov	r10, r18
     d9a:	89 14       	cp	r8, r9
     d9c:	58 f4       	brcc	.+22     	; 0xdb4 <vfprintf+0x2d0>
     d9e:	34 fe       	sbrs	r3, 4
     da0:	0b c0       	rjmp	.+22     	; 0xdb8 <vfprintf+0x2d4>
     da2:	32 fc       	sbrc	r3, 2
     da4:	09 c0       	rjmp	.+18     	; 0xdb8 <vfprintf+0x2d4>
     da6:	83 2d       	mov	r24, r3
     da8:	8e 7e       	andi	r24, 0xEE	; 238
     daa:	a8 2e       	mov	r10, r24
     dac:	05 c0       	rjmp	.+10     	; 0xdb8 <vfprintf+0x2d4>
     dae:	b8 2c       	mov	r11, r8
     db0:	a3 2c       	mov	r10, r3
     db2:	03 c0       	rjmp	.+6      	; 0xdba <vfprintf+0x2d6>
     db4:	b8 2c       	mov	r11, r8
     db6:	01 c0       	rjmp	.+2      	; 0xdba <vfprintf+0x2d6>
     db8:	b9 2c       	mov	r11, r9
     dba:	a4 fe       	sbrs	r10, 4
     dbc:	0f c0       	rjmp	.+30     	; 0xddc <vfprintf+0x2f8>
     dbe:	fe 01       	movw	r30, r28
     dc0:	e8 0d       	add	r30, r8
     dc2:	f1 1d       	adc	r31, r1
     dc4:	80 81       	ld	r24, Z
     dc6:	80 33       	cpi	r24, 0x30	; 48
     dc8:	21 f4       	brne	.+8      	; 0xdd2 <vfprintf+0x2ee>
     dca:	9a 2d       	mov	r25, r10
     dcc:	99 7e       	andi	r25, 0xE9	; 233
     dce:	a9 2e       	mov	r10, r25
     dd0:	09 c0       	rjmp	.+18     	; 0xde4 <vfprintf+0x300>
     dd2:	a2 fe       	sbrs	r10, 2
     dd4:	06 c0       	rjmp	.+12     	; 0xde2 <vfprintf+0x2fe>
     dd6:	b3 94       	inc	r11
     dd8:	b3 94       	inc	r11
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <vfprintf+0x300>
     ddc:	8a 2d       	mov	r24, r10
     dde:	86 78       	andi	r24, 0x86	; 134
     de0:	09 f0       	breq	.+2      	; 0xde4 <vfprintf+0x300>
     de2:	b3 94       	inc	r11
     de4:	a3 fc       	sbrc	r10, 3
     de6:	11 c0       	rjmp	.+34     	; 0xe0a <vfprintf+0x326>
     de8:	a0 fe       	sbrs	r10, 0
     dea:	06 c0       	rjmp	.+12     	; 0xdf8 <vfprintf+0x314>
     dec:	b2 14       	cp	r11, r2
     dee:	88 f4       	brcc	.+34     	; 0xe12 <vfprintf+0x32e>
     df0:	28 0c       	add	r2, r8
     df2:	92 2c       	mov	r9, r2
     df4:	9b 18       	sub	r9, r11
     df6:	0e c0       	rjmp	.+28     	; 0xe14 <vfprintf+0x330>
     df8:	b2 14       	cp	r11, r2
     dfa:	60 f4       	brcc	.+24     	; 0xe14 <vfprintf+0x330>
     dfc:	b6 01       	movw	r22, r12
     dfe:	80 e2       	ldi	r24, 0x20	; 32
     e00:	90 e0       	ldi	r25, 0x00	; 0
     e02:	0e 94 8c 07 	call	0xf18	; 0xf18 <fputc>
     e06:	b3 94       	inc	r11
     e08:	f7 cf       	rjmp	.-18     	; 0xdf8 <vfprintf+0x314>
     e0a:	b2 14       	cp	r11, r2
     e0c:	18 f4       	brcc	.+6      	; 0xe14 <vfprintf+0x330>
     e0e:	2b 18       	sub	r2, r11
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <vfprintf+0x332>
     e12:	98 2c       	mov	r9, r8
     e14:	21 2c       	mov	r2, r1
     e16:	a4 fe       	sbrs	r10, 4
     e18:	10 c0       	rjmp	.+32     	; 0xe3a <vfprintf+0x356>
     e1a:	b6 01       	movw	r22, r12
     e1c:	80 e3       	ldi	r24, 0x30	; 48
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 8c 07 	call	0xf18	; 0xf18 <fputc>
     e24:	a2 fe       	sbrs	r10, 2
     e26:	17 c0       	rjmp	.+46     	; 0xe56 <vfprintf+0x372>
     e28:	a1 fc       	sbrc	r10, 1
     e2a:	03 c0       	rjmp	.+6      	; 0xe32 <vfprintf+0x34e>
     e2c:	88 e7       	ldi	r24, 0x78	; 120
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	02 c0       	rjmp	.+4      	; 0xe36 <vfprintf+0x352>
     e32:	88 e5       	ldi	r24, 0x58	; 88
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	b6 01       	movw	r22, r12
     e38:	0c c0       	rjmp	.+24     	; 0xe52 <vfprintf+0x36e>
     e3a:	8a 2d       	mov	r24, r10
     e3c:	86 78       	andi	r24, 0x86	; 134
     e3e:	59 f0       	breq	.+22     	; 0xe56 <vfprintf+0x372>
     e40:	a1 fe       	sbrs	r10, 1
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <vfprintf+0x364>
     e44:	8b e2       	ldi	r24, 0x2B	; 43
     e46:	01 c0       	rjmp	.+2      	; 0xe4a <vfprintf+0x366>
     e48:	80 e2       	ldi	r24, 0x20	; 32
     e4a:	a7 fc       	sbrc	r10, 7
     e4c:	8d e2       	ldi	r24, 0x2D	; 45
     e4e:	b6 01       	movw	r22, r12
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 8c 07 	call	0xf18	; 0xf18 <fputc>
     e56:	89 14       	cp	r8, r9
     e58:	38 f4       	brcc	.+14     	; 0xe68 <vfprintf+0x384>
     e5a:	b6 01       	movw	r22, r12
     e5c:	80 e3       	ldi	r24, 0x30	; 48
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 8c 07 	call	0xf18	; 0xf18 <fputc>
     e64:	9a 94       	dec	r9
     e66:	f7 cf       	rjmp	.-18     	; 0xe56 <vfprintf+0x372>
     e68:	8a 94       	dec	r8
     e6a:	f3 01       	movw	r30, r6
     e6c:	e8 0d       	add	r30, r8
     e6e:	f1 1d       	adc	r31, r1
     e70:	80 81       	ld	r24, Z
     e72:	b6 01       	movw	r22, r12
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 8c 07 	call	0xf18	; 0xf18 <fputc>
     e7a:	81 10       	cpse	r8, r1
     e7c:	f5 cf       	rjmp	.-22     	; 0xe68 <vfprintf+0x384>
     e7e:	22 20       	and	r2, r2
     e80:	09 f4       	brne	.+2      	; 0xe84 <vfprintf+0x3a0>
     e82:	42 ce       	rjmp	.-892    	; 0xb08 <vfprintf+0x24>
     e84:	b6 01       	movw	r22, r12
     e86:	80 e2       	ldi	r24, 0x20	; 32
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 8c 07 	call	0xf18	; 0xf18 <fputc>
     e8e:	2a 94       	dec	r2
     e90:	f6 cf       	rjmp	.-20     	; 0xe7e <vfprintf+0x39a>
     e92:	f6 01       	movw	r30, r12
     e94:	86 81       	ldd	r24, Z+6	; 0x06
     e96:	97 81       	ldd	r25, Z+7	; 0x07
     e98:	02 c0       	rjmp	.+4      	; 0xe9e <vfprintf+0x3ba>
     e9a:	8f ef       	ldi	r24, 0xFF	; 255
     e9c:	9f ef       	ldi	r25, 0xFF	; 255
     e9e:	2b 96       	adiw	r28, 0x0b	; 11
     ea0:	e2 e1       	ldi	r30, 0x12	; 18
     ea2:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <__epilogue_restores__>

00000ea6 <calloc>:
     ea6:	0f 93       	push	r16
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	86 9f       	mul	r24, r22
     eb0:	80 01       	movw	r16, r0
     eb2:	87 9f       	mul	r24, r23
     eb4:	10 0d       	add	r17, r0
     eb6:	96 9f       	mul	r25, r22
     eb8:	10 0d       	add	r17, r0
     eba:	11 24       	eor	r1, r1
     ebc:	c8 01       	movw	r24, r16
     ebe:	0e 94 64 03 	call	0x6c8	; 0x6c8 <malloc>
     ec2:	ec 01       	movw	r28, r24
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	29 f0       	breq	.+10     	; 0xed2 <calloc+0x2c>
     ec8:	a8 01       	movw	r20, r16
     eca:	60 e0       	ldi	r22, 0x00	; 0
     ecc:	70 e0       	ldi	r23, 0x00	; 0
     ece:	0e 94 7a 07 	call	0xef4	; 0xef4 <memset>
     ed2:	ce 01       	movw	r24, r28
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	08 95       	ret

00000ede <strnlen_P>:
     ede:	fc 01       	movw	r30, r24
     ee0:	05 90       	lpm	r0, Z+
     ee2:	61 50       	subi	r22, 0x01	; 1
     ee4:	70 40       	sbci	r23, 0x00	; 0
     ee6:	01 10       	cpse	r0, r1
     ee8:	d8 f7       	brcc	.-10     	; 0xee0 <strnlen_P+0x2>
     eea:	80 95       	com	r24
     eec:	90 95       	com	r25
     eee:	8e 0f       	add	r24, r30
     ef0:	9f 1f       	adc	r25, r31
     ef2:	08 95       	ret

00000ef4 <memset>:
     ef4:	dc 01       	movw	r26, r24
     ef6:	01 c0       	rjmp	.+2      	; 0xefa <memset+0x6>
     ef8:	6d 93       	st	X+, r22
     efa:	41 50       	subi	r20, 0x01	; 1
     efc:	50 40       	sbci	r21, 0x00	; 0
     efe:	e0 f7       	brcc	.-8      	; 0xef8 <memset+0x4>
     f00:	08 95       	ret

00000f02 <strnlen>:
     f02:	fc 01       	movw	r30, r24
     f04:	61 50       	subi	r22, 0x01	; 1
     f06:	70 40       	sbci	r23, 0x00	; 0
     f08:	01 90       	ld	r0, Z+
     f0a:	01 10       	cpse	r0, r1
     f0c:	d8 f7       	brcc	.-10     	; 0xf04 <strnlen+0x2>
     f0e:	80 95       	com	r24
     f10:	90 95       	com	r25
     f12:	8e 0f       	add	r24, r30
     f14:	9f 1f       	adc	r25, r31
     f16:	08 95       	ret

00000f18 <fputc>:
     f18:	0f 93       	push	r16
     f1a:	1f 93       	push	r17
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	fb 01       	movw	r30, r22
     f22:	23 81       	ldd	r18, Z+3	; 0x03
     f24:	21 fd       	sbrc	r18, 1
     f26:	03 c0       	rjmp	.+6      	; 0xf2e <fputc+0x16>
     f28:	8f ef       	ldi	r24, 0xFF	; 255
     f2a:	9f ef       	ldi	r25, 0xFF	; 255
     f2c:	2c c0       	rjmp	.+88     	; 0xf86 <fputc+0x6e>
     f2e:	22 ff       	sbrs	r18, 2
     f30:	16 c0       	rjmp	.+44     	; 0xf5e <fputc+0x46>
     f32:	46 81       	ldd	r20, Z+6	; 0x06
     f34:	57 81       	ldd	r21, Z+7	; 0x07
     f36:	24 81       	ldd	r18, Z+4	; 0x04
     f38:	35 81       	ldd	r19, Z+5	; 0x05
     f3a:	42 17       	cp	r20, r18
     f3c:	53 07       	cpc	r21, r19
     f3e:	44 f4       	brge	.+16     	; 0xf50 <fputc+0x38>
     f40:	a0 81       	ld	r26, Z
     f42:	b1 81       	ldd	r27, Z+1	; 0x01
     f44:	9d 01       	movw	r18, r26
     f46:	2f 5f       	subi	r18, 0xFF	; 255
     f48:	3f 4f       	sbci	r19, 0xFF	; 255
     f4a:	31 83       	std	Z+1, r19	; 0x01
     f4c:	20 83       	st	Z, r18
     f4e:	8c 93       	st	X, r24
     f50:	26 81       	ldd	r18, Z+6	; 0x06
     f52:	37 81       	ldd	r19, Z+7	; 0x07
     f54:	2f 5f       	subi	r18, 0xFF	; 255
     f56:	3f 4f       	sbci	r19, 0xFF	; 255
     f58:	37 83       	std	Z+7, r19	; 0x07
     f5a:	26 83       	std	Z+6, r18	; 0x06
     f5c:	14 c0       	rjmp	.+40     	; 0xf86 <fputc+0x6e>
     f5e:	8b 01       	movw	r16, r22
     f60:	ec 01       	movw	r28, r24
     f62:	fb 01       	movw	r30, r22
     f64:	00 84       	ldd	r0, Z+8	; 0x08
     f66:	f1 85       	ldd	r31, Z+9	; 0x09
     f68:	e0 2d       	mov	r30, r0
     f6a:	09 95       	icall
     f6c:	89 2b       	or	r24, r25
     f6e:	e1 f6       	brne	.-72     	; 0xf28 <fputc+0x10>
     f70:	d8 01       	movw	r26, r16
     f72:	16 96       	adiw	r26, 0x06	; 6
     f74:	8d 91       	ld	r24, X+
     f76:	9c 91       	ld	r25, X
     f78:	17 97       	sbiw	r26, 0x07	; 7
     f7a:	01 96       	adiw	r24, 0x01	; 1
     f7c:	17 96       	adiw	r26, 0x07	; 7
     f7e:	9c 93       	st	X, r25
     f80:	8e 93       	st	-X, r24
     f82:	16 97       	sbiw	r26, 0x06	; 6
     f84:	ce 01       	movw	r24, r28
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	08 95       	ret

00000f90 <__ultoa_invert>:
     f90:	fa 01       	movw	r30, r20
     f92:	aa 27       	eor	r26, r26
     f94:	28 30       	cpi	r18, 0x08	; 8
     f96:	51 f1       	breq	.+84     	; 0xfec <__ultoa_invert+0x5c>
     f98:	20 31       	cpi	r18, 0x10	; 16
     f9a:	81 f1       	breq	.+96     	; 0xffc <__ultoa_invert+0x6c>
     f9c:	e8 94       	clt
     f9e:	6f 93       	push	r22
     fa0:	6e 7f       	andi	r22, 0xFE	; 254
     fa2:	6e 5f       	subi	r22, 0xFE	; 254
     fa4:	7f 4f       	sbci	r23, 0xFF	; 255
     fa6:	8f 4f       	sbci	r24, 0xFF	; 255
     fa8:	9f 4f       	sbci	r25, 0xFF	; 255
     faa:	af 4f       	sbci	r26, 0xFF	; 255
     fac:	b1 e0       	ldi	r27, 0x01	; 1
     fae:	3e d0       	rcall	.+124    	; 0x102c <__ultoa_invert+0x9c>
     fb0:	b4 e0       	ldi	r27, 0x04	; 4
     fb2:	3c d0       	rcall	.+120    	; 0x102c <__ultoa_invert+0x9c>
     fb4:	67 0f       	add	r22, r23
     fb6:	78 1f       	adc	r23, r24
     fb8:	89 1f       	adc	r24, r25
     fba:	9a 1f       	adc	r25, r26
     fbc:	a1 1d       	adc	r26, r1
     fbe:	68 0f       	add	r22, r24
     fc0:	79 1f       	adc	r23, r25
     fc2:	8a 1f       	adc	r24, r26
     fc4:	91 1d       	adc	r25, r1
     fc6:	a1 1d       	adc	r26, r1
     fc8:	6a 0f       	add	r22, r26
     fca:	71 1d       	adc	r23, r1
     fcc:	81 1d       	adc	r24, r1
     fce:	91 1d       	adc	r25, r1
     fd0:	a1 1d       	adc	r26, r1
     fd2:	20 d0       	rcall	.+64     	; 0x1014 <__ultoa_invert+0x84>
     fd4:	09 f4       	brne	.+2      	; 0xfd8 <__ultoa_invert+0x48>
     fd6:	68 94       	set
     fd8:	3f 91       	pop	r19
     fda:	2a e0       	ldi	r18, 0x0A	; 10
     fdc:	26 9f       	mul	r18, r22
     fde:	11 24       	eor	r1, r1
     fe0:	30 19       	sub	r19, r0
     fe2:	30 5d       	subi	r19, 0xD0	; 208
     fe4:	31 93       	st	Z+, r19
     fe6:	de f6       	brtc	.-74     	; 0xf9e <__ultoa_invert+0xe>
     fe8:	cf 01       	movw	r24, r30
     fea:	08 95       	ret
     fec:	46 2f       	mov	r20, r22
     fee:	47 70       	andi	r20, 0x07	; 7
     ff0:	40 5d       	subi	r20, 0xD0	; 208
     ff2:	41 93       	st	Z+, r20
     ff4:	b3 e0       	ldi	r27, 0x03	; 3
     ff6:	0f d0       	rcall	.+30     	; 0x1016 <__ultoa_invert+0x86>
     ff8:	c9 f7       	brne	.-14     	; 0xfec <__ultoa_invert+0x5c>
     ffa:	f6 cf       	rjmp	.-20     	; 0xfe8 <__ultoa_invert+0x58>
     ffc:	46 2f       	mov	r20, r22
     ffe:	4f 70       	andi	r20, 0x0F	; 15
    1000:	40 5d       	subi	r20, 0xD0	; 208
    1002:	4a 33       	cpi	r20, 0x3A	; 58
    1004:	18 f0       	brcs	.+6      	; 0x100c <__ultoa_invert+0x7c>
    1006:	49 5d       	subi	r20, 0xD9	; 217
    1008:	31 fd       	sbrc	r19, 1
    100a:	40 52       	subi	r20, 0x20	; 32
    100c:	41 93       	st	Z+, r20
    100e:	02 d0       	rcall	.+4      	; 0x1014 <__ultoa_invert+0x84>
    1010:	a9 f7       	brne	.-22     	; 0xffc <__ultoa_invert+0x6c>
    1012:	ea cf       	rjmp	.-44     	; 0xfe8 <__ultoa_invert+0x58>
    1014:	b4 e0       	ldi	r27, 0x04	; 4
    1016:	a6 95       	lsr	r26
    1018:	97 95       	ror	r25
    101a:	87 95       	ror	r24
    101c:	77 95       	ror	r23
    101e:	67 95       	ror	r22
    1020:	ba 95       	dec	r27
    1022:	c9 f7       	brne	.-14     	; 0x1016 <__ultoa_invert+0x86>
    1024:	00 97       	sbiw	r24, 0x00	; 0
    1026:	61 05       	cpc	r22, r1
    1028:	71 05       	cpc	r23, r1
    102a:	08 95       	ret
    102c:	9b 01       	movw	r18, r22
    102e:	ac 01       	movw	r20, r24
    1030:	0a 2e       	mov	r0, r26
    1032:	06 94       	lsr	r0
    1034:	57 95       	ror	r21
    1036:	47 95       	ror	r20
    1038:	37 95       	ror	r19
    103a:	27 95       	ror	r18
    103c:	ba 95       	dec	r27
    103e:	c9 f7       	brne	.-14     	; 0x1032 <__ultoa_invert+0xa2>
    1040:	62 0f       	add	r22, r18
    1042:	73 1f       	adc	r23, r19
    1044:	84 1f       	adc	r24, r20
    1046:	95 1f       	adc	r25, r21
    1048:	a0 1d       	adc	r26, r0
    104a:	08 95       	ret

0000104c <__divmodsi4>:
    104c:	05 2e       	mov	r0, r21
    104e:	97 fb       	bst	r25, 7
    1050:	1e f4       	brtc	.+6      	; 0x1058 <__divmodsi4+0xc>
    1052:	00 94       	com	r0
    1054:	0e 94 3d 08 	call	0x107a	; 0x107a <__negsi2>
    1058:	57 fd       	sbrc	r21, 7
    105a:	07 d0       	rcall	.+14     	; 0x106a <__divmodsi4_neg2>
    105c:	0e 94 42 03 	call	0x684	; 0x684 <__udivmodsi4>
    1060:	07 fc       	sbrc	r0, 7
    1062:	03 d0       	rcall	.+6      	; 0x106a <__divmodsi4_neg2>
    1064:	4e f4       	brtc	.+18     	; 0x1078 <__divmodsi4_exit>
    1066:	0c 94 3d 08 	jmp	0x107a	; 0x107a <__negsi2>

0000106a <__divmodsi4_neg2>:
    106a:	50 95       	com	r21
    106c:	40 95       	com	r20
    106e:	30 95       	com	r19
    1070:	21 95       	neg	r18
    1072:	3f 4f       	sbci	r19, 0xFF	; 255
    1074:	4f 4f       	sbci	r20, 0xFF	; 255
    1076:	5f 4f       	sbci	r21, 0xFF	; 255

00001078 <__divmodsi4_exit>:
    1078:	08 95       	ret

0000107a <__negsi2>:
    107a:	90 95       	com	r25
    107c:	80 95       	com	r24
    107e:	70 95       	com	r23
    1080:	61 95       	neg	r22
    1082:	7f 4f       	sbci	r23, 0xFF	; 255
    1084:	8f 4f       	sbci	r24, 0xFF	; 255
    1086:	9f 4f       	sbci	r25, 0xFF	; 255
    1088:	08 95       	ret

0000108a <__muluhisi3>:
    108a:	0e 94 8f 08 	call	0x111e	; 0x111e <__umulhisi3>
    108e:	a5 9f       	mul	r26, r21
    1090:	90 0d       	add	r25, r0
    1092:	b4 9f       	mul	r27, r20
    1094:	90 0d       	add	r25, r0
    1096:	a4 9f       	mul	r26, r20
    1098:	80 0d       	add	r24, r0
    109a:	91 1d       	adc	r25, r1
    109c:	11 24       	eor	r1, r1
    109e:	08 95       	ret

000010a0 <__mulshisi3>:
    10a0:	b7 ff       	sbrs	r27, 7
    10a2:	0c 94 45 08 	jmp	0x108a	; 0x108a <__muluhisi3>

000010a6 <__mulohisi3>:
    10a6:	0e 94 45 08 	call	0x108a	; 0x108a <__muluhisi3>
    10aa:	82 1b       	sub	r24, r18
    10ac:	93 0b       	sbc	r25, r19
    10ae:	08 95       	ret

000010b0 <__prologue_saves__>:
    10b0:	2f 92       	push	r2
    10b2:	3f 92       	push	r3
    10b4:	4f 92       	push	r4
    10b6:	5f 92       	push	r5
    10b8:	6f 92       	push	r6
    10ba:	7f 92       	push	r7
    10bc:	8f 92       	push	r8
    10be:	9f 92       	push	r9
    10c0:	af 92       	push	r10
    10c2:	bf 92       	push	r11
    10c4:	cf 92       	push	r12
    10c6:	df 92       	push	r13
    10c8:	ef 92       	push	r14
    10ca:	ff 92       	push	r15
    10cc:	0f 93       	push	r16
    10ce:	1f 93       	push	r17
    10d0:	cf 93       	push	r28
    10d2:	df 93       	push	r29
    10d4:	cd b7       	in	r28, 0x3d	; 61
    10d6:	de b7       	in	r29, 0x3e	; 62
    10d8:	ca 1b       	sub	r28, r26
    10da:	db 0b       	sbc	r29, r27
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	de bf       	out	0x3e, r29	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	cd bf       	out	0x3d, r28	; 61
    10e6:	09 94       	ijmp

000010e8 <__epilogue_restores__>:
    10e8:	2a 88       	ldd	r2, Y+18	; 0x12
    10ea:	39 88       	ldd	r3, Y+17	; 0x11
    10ec:	48 88       	ldd	r4, Y+16	; 0x10
    10ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    10f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    10f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    10f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    10f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    10f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    10fa:	b9 84       	ldd	r11, Y+9	; 0x09
    10fc:	c8 84       	ldd	r12, Y+8	; 0x08
    10fe:	df 80       	ldd	r13, Y+7	; 0x07
    1100:	ee 80       	ldd	r14, Y+6	; 0x06
    1102:	fd 80       	ldd	r15, Y+5	; 0x05
    1104:	0c 81       	ldd	r16, Y+4	; 0x04
    1106:	1b 81       	ldd	r17, Y+3	; 0x03
    1108:	aa 81       	ldd	r26, Y+2	; 0x02
    110a:	b9 81       	ldd	r27, Y+1	; 0x01
    110c:	ce 0f       	add	r28, r30
    110e:	d1 1d       	adc	r29, r1
    1110:	0f b6       	in	r0, 0x3f	; 63
    1112:	f8 94       	cli
    1114:	de bf       	out	0x3e, r29	; 62
    1116:	0f be       	out	0x3f, r0	; 63
    1118:	cd bf       	out	0x3d, r28	; 61
    111a:	ed 01       	movw	r28, r26
    111c:	08 95       	ret

0000111e <__umulhisi3>:
    111e:	a2 9f       	mul	r26, r18
    1120:	b0 01       	movw	r22, r0
    1122:	b3 9f       	mul	r27, r19
    1124:	c0 01       	movw	r24, r0
    1126:	a3 9f       	mul	r26, r19
    1128:	70 0d       	add	r23, r0
    112a:	81 1d       	adc	r24, r1
    112c:	11 24       	eor	r1, r1
    112e:	91 1d       	adc	r25, r1
    1130:	b2 9f       	mul	r27, r18
    1132:	70 0d       	add	r23, r0
    1134:	81 1d       	adc	r24, r1
    1136:	11 24       	eor	r1, r1
    1138:	91 1d       	adc	r25, r1
    113a:	08 95       	ret

0000113c <_exit>:
    113c:	f8 94       	cli

0000113e <__stop_program>:
    113e:	ff cf       	rjmp	.-2      	; 0x113e <__stop_program>
