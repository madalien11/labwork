
EX2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010a  00800100  00000d36  00000dca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080020a  0080020a  00000ed4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000920  00000000  00000000  00000fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000781  00000000  00000000  000018f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000435  00000000  00000000  00002075  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  000024ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003f8  00000000  00000000  000025c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000265  00000000  00000000  000029b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002c1d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 e3       	ldi	r30, 0x36	; 54
  84:	fd e0       	ldi	r31, 0x0D	; 13
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	aa 30       	cpi	r26, 0x0A	; 10
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	aa e0       	ldi	r26, 0x0A	; 10
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 31       	cpi	r26, 0x14	; 20
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 d6 00 	call	0x1ac	; 0x1ac <main>
  a6:	0c 94 99 06 	jmp	0xd32	; 0xd32 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <SRAM_test>:
#include <stdio.h>
#include <avr/io.h>
#include "UART_driver.h"


void SRAM_test(void) {
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
	volatile char* ext_ram = (char*) 0x1800; // S t a r t a d d r e s s f o r the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	printf("Starting SRAM test...\n");
  ba:	8a e0       	ldi	r24, 0x0A	; 10
  bc:	91 e0       	ldi	r25, 0x01	; 1
  be:	0e 94 1c 02 	call	0x438	; 0x438 <puts>
	// rand ( ) stores some internal state , so calling this function in a loop ?-will
	// yield different seeds each time ( unless srand ( ) is called before this ?-function)
	uint16_t seed = rand();
  c2:	0e 94 ab 01 	call	0x356	; 0x356 <rand>
  c6:	7c 01       	movw	r14, r24
	// Write phase : Immediately check t h a t the c o r r e c t v al u e was s t o r e d
	srand(seed);
  c8:	0e 94 b0 01 	call	0x360	; 0x360 <srand>
	for(uint16_t i = 0; i < ext_ram_size; i++) {
  cc:	c0 e0       	ldi	r28, 0x00	; 0
  ce:	d0 e0       	ldi	r29, 0x00	; 0


void SRAM_test(void) {
	volatile char* ext_ram = (char*) 0x1800; // S t a r t a d d r e s s f o r the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
  d0:	00 e0       	ldi	r16, 0x00	; 0
  d2:	10 e0       	ldi	r17, 0x00	; 0
	// rand ( ) stores some internal state , so calling this function in a loop ?-will
	// yield different seeds each time ( unless srand ( ) is called before this ?-function)
	uint16_t seed = rand();
	// Write phase : Immediately check t h a t the c o r r e c t v al u e was s t o r e d
	srand(seed);
	for(uint16_t i = 0; i < ext_ram_size; i++) {
  d4:	20 c0       	rjmp	.+64     	; 0x116 <SRAM_test+0x68>
		uint8_t some_value = rand();
  d6:	0e 94 ab 01 	call	0x356	; 0x356 <rand>
		ext_ram[i] = some_value;
  da:	fe 01       	movw	r30, r28
  dc:	f8 5e       	subi	r31, 0xE8	; 232
  de:	80 83       	st	Z, r24
		uint8_t retreived_value = ext_ram[i];
  e0:	20 81       	ld	r18, Z
		if(retreived_value != some_value) {
  e2:	28 17       	cp	r18, r24
  e4:	b9 f0       	breq	.+46     	; 0x114 <SRAM_test+0x66>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
  e6:	99 27       	eor	r25, r25
  e8:	9f 93       	push	r25
  ea:	8f 93       	push	r24
  ec:	1f 92       	push	r1
  ee:	2f 93       	push	r18
  f0:	df 93       	push	r29
  f2:	cf 93       	push	r28
  f4:	80 e2       	ldi	r24, 0x20	; 32
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	9f 93       	push	r25
  fa:	8f 93       	push	r24
  fc:	0e 94 06 02 	call	0x40c	; 0x40c <printf>
			write_errors++;
 100:	0f 5f       	subi	r16, 0xFF	; 255
 102:	1f 4f       	sbci	r17, 0xFF	; 255
 104:	8d b7       	in	r24, 0x3d	; 61
 106:	9e b7       	in	r25, 0x3e	; 62
 108:	08 96       	adiw	r24, 0x08	; 8
 10a:	0f b6       	in	r0, 0x3f	; 63
 10c:	f8 94       	cli
 10e:	9e bf       	out	0x3e, r25	; 62
 110:	0f be       	out	0x3f, r0	; 63
 112:	8d bf       	out	0x3d, r24	; 61
	// rand ( ) stores some internal state , so calling this function in a loop ?-will
	// yield different seeds each time ( unless srand ( ) is called before this ?-function)
	uint16_t seed = rand();
	// Write phase : Immediately check t h a t the c o r r e c t v al u e was s t o r e d
	srand(seed);
	for(uint16_t i = 0; i < ext_ram_size; i++) {
 114:	21 96       	adiw	r28, 0x01	; 1
 116:	c1 15       	cp	r28, r1
 118:	98 e0       	ldi	r25, 0x08	; 8
 11a:	d9 07       	cpc	r29, r25
 11c:	e0 f2       	brcs	.-72     	; 0xd6 <SRAM_test+0x28>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			write_errors++;
		}
	}
	// R e t r i e v a l phase : Check t h a t no v al u e s were changed du rin g o r a f t e r the?- write phase
	srand(seed);
 11e:	c7 01       	movw	r24, r14
 120:	0e 94 b0 01 	call	0x360	; 0x360 <srand>
	// r e s e t the PRNG t o the s t a t e i t had b e f o r e the w ri t e phase
	for(uint16_t i = 0; i < ext_ram_size; i++) {
 124:	c0 e0       	ldi	r28, 0x00	; 0
 126:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void) {
	volatile char* ext_ram = (char*) 0x1800; // S t a r t a d d r e s s f o r the SRAM
	uint16_t ext_ram_size = 0x800;
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
 128:	e1 2c       	mov	r14, r1
 12a:	f1 2c       	mov	r15, r1
		}
	}
	// R e t r i e v a l phase : Check t h a t no v al u e s were changed du rin g o r a f t e r the?- write phase
	srand(seed);
	// r e s e t the PRNG t o the s t a t e i t had b e f o r e the w ri t e phase
	for(uint16_t i = 0; i < ext_ram_size; i++) {
 12c:	20 c0       	rjmp	.+64     	; 0x16e <SRAM_test+0xc0>
		uint8_t some_value = rand();
 12e:	0e 94 ab 01 	call	0x356	; 0x356 <rand>
		uint8_t retreived_value = ext_ram[i];
 132:	fe 01       	movw	r30, r28
 134:	f8 5e       	subi	r31, 0xE8	; 232
 136:	20 81       	ld	r18, Z
		if(retreived_value != some_value) {
 138:	28 17       	cp	r18, r24
 13a:	c1 f0       	breq	.+48     	; 0x16c <SRAM_test+0xbe>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
 13c:	99 27       	eor	r25, r25
 13e:	9f 93       	push	r25
 140:	8f 93       	push	r24
 142:	1f 92       	push	r1
 144:	2f 93       	push	r18
 146:	df 93       	push	r29
 148:	cf 93       	push	r28
 14a:	89 e5       	ldi	r24, 0x59	; 89
 14c:	91 e0       	ldi	r25, 0x01	; 1
 14e:	9f 93       	push	r25
 150:	8f 93       	push	r24
 152:	0e 94 06 02 	call	0x40c	; 0x40c <printf>
			retrieval_errors++;
 156:	8f ef       	ldi	r24, 0xFF	; 255
 158:	e8 1a       	sub	r14, r24
 15a:	f8 0a       	sbc	r15, r24
 15c:	8d b7       	in	r24, 0x3d	; 61
 15e:	9e b7       	in	r25, 0x3e	; 62
 160:	08 96       	adiw	r24, 0x08	; 8
 162:	0f b6       	in	r0, 0x3f	; 63
 164:	f8 94       	cli
 166:	9e bf       	out	0x3e, r25	; 62
 168:	0f be       	out	0x3f, r0	; 63
 16a:	8d bf       	out	0x3d, r24	; 61
		}
	}
	// R e t r i e v a l phase : Check t h a t no v al u e s were changed du rin g o r a f t e r the?- write phase
	srand(seed);
	// r e s e t the PRNG t o the s t a t e i t had b e f o r e the w ri t e phase
	for(uint16_t i = 0; i < ext_ram_size; i++) {
 16c:	21 96       	adiw	r28, 0x01	; 1
 16e:	c1 15       	cp	r28, r1
 170:	98 e0       	ldi	r25, 0x08	; 8
 172:	d9 07       	cpc	r29, r25
 174:	e0 f2       	brcs	.-72     	; 0x12e <SRAM_test+0x80>
		if(retreived_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n", i, retreived_value, some_value);
			retrieval_errors++;
		}
	}
	printf("SRAM test completed with \n %4d errors in write phase and\n %4d errors in retrieval phase\n\n", write_errors, retrieval_errors);
 176:	ff 92       	push	r15
 178:	ef 92       	push	r14
 17a:	1f 93       	push	r17
 17c:	0f 93       	push	r16
 17e:	86 e9       	ldi	r24, 0x96	; 150
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	9f 93       	push	r25
 184:	8f 93       	push	r24
 186:	0e 94 06 02 	call	0x40c	; 0x40c <printf>
	printf("\n\n\n\n");
 18a:	80 ef       	ldi	r24, 0xF0	; 240
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	0e 94 1c 02 	call	0x438	; 0x438 <puts>
	
}
 192:	0f 90       	pop	r0
 194:	0f 90       	pop	r0
 196:	0f 90       	pop	r0
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	1f 91       	pop	r17
 1a4:	0f 91       	pop	r16
 1a6:	ff 90       	pop	r15
 1a8:	ef 90       	pop	r14
 1aa:	08 95       	ret

000001ac <main>:

int main(){


	SFIOR |= (1 << XMM2);
 1ac:	80 b7       	in	r24, 0x30	; 48
 1ae:	80 62       	ori	r24, 0x20	; 32
 1b0:	80 bf       	out	0x30, r24	; 48
	MCUCR |= (1 << SRE);
 1b2:	85 b7       	in	r24, 0x35	; 53
 1b4:	80 68       	ori	r24, 0x80	; 128
 1b6:	85 bf       	out	0x35, r24	; 53
	alternate_printf();
 1b8:	0e 94 2c 01 	call	0x258	; 0x258 <alternate_printf>
	SRAM_test();
 1bc:	0e 94 57 00 	call	0xae	; 0xae <SRAM_test>

	return 0;
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	08 95       	ret

000001c6 <UART_RxChar>:
	
}

unsigned char UART_RxChar()
{
	while ((UCSR0A & (1 << RXC0)) == 0);/* Wait till data is received */
 1c6:	5f 9b       	sbis	0x0b, 7	; 11
 1c8:	fe cf       	rjmp	.-4      	; 0x1c6 <UART_RxChar>
	return(UDR0);			/* Return the byte*/
 1ca:	8c b1       	in	r24, 0x0c	; 12
}
 1cc:	08 95       	ret

000001ce <UART_TxChar>:

void UART_TxChar(char ch)
{
	while (! (UCSR0A & (1<<UDRE0)));	/* Wait for empty transmit buffer*/
 1ce:	5d 9b       	sbis	0x0b, 5	; 11
 1d0:	fe cf       	rjmp	.-4      	; 0x1ce <UART_TxChar>
	UDR0 = ch ;
 1d2:	8c b9       	out	0x0c, r24	; 12
 1d4:	08 95       	ret

000001d6 <UART_init>:
#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)


void UART_init(long USART_BAUDRATE)
{
	UBRR0L = BAUD_PRESCALE;		/* Load lower 8-bits of the baud rate value */
 1d6:	dc 01       	movw	r26, r24
 1d8:	cb 01       	movw	r24, r22
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	aa 1f       	adc	r26, r26
 1e0:	bb 1f       	adc	r27, r27
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	aa 1f       	adc	r26, r26
 1e8:	bb 1f       	adc	r27, r27
 1ea:	9c 01       	movw	r18, r24
 1ec:	ad 01       	movw	r20, r26
 1ee:	22 0f       	add	r18, r18
 1f0:	33 1f       	adc	r19, r19
 1f2:	44 1f       	adc	r20, r20
 1f4:	55 1f       	adc	r21, r21
 1f6:	22 0f       	add	r18, r18
 1f8:	33 1f       	adc	r19, r19
 1fa:	44 1f       	adc	r20, r20
 1fc:	55 1f       	adc	r21, r21
 1fe:	60 e0       	ldi	r22, 0x00	; 0
 200:	70 e0       	ldi	r23, 0x00	; 0
 202:	8b e4       	ldi	r24, 0x4B	; 75
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 3d 01 	call	0x27a	; 0x27a <__udivmodsi4>
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	82 0f       	add	r24, r18
 20e:	89 b9       	out	0x09, r24	; 9
	UBRR0H = (BAUD_PRESCALE >> 8);	/* Load upper 8-bits*/
 210:	da 01       	movw	r26, r20
 212:	c9 01       	movw	r24, r18
 214:	01 97       	sbiw	r24, 0x01	; 1
 216:	a1 09       	sbc	r26, r1
 218:	b1 09       	sbc	r27, r1
 21a:	89 2f       	mov	r24, r25
 21c:	9a 2f       	mov	r25, r26
 21e:	ab 2f       	mov	r26, r27
 220:	bb 27       	eor	r27, r27
 222:	80 bd       	out	0x20, r24	; 32
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);/* Turn on transmission and reception */
 224:	8a b1       	in	r24, 0x0a	; 10
 226:	88 61       	ori	r24, 0x18	; 24
 228:	8a b9       	out	0x0a, r24	; 10
	UCSR0C |= (1 << URSEL0) | (1<<USBS0) | (3 << UCSZ00);/* Use 8-bit character sizes */
 22a:	80 b5       	in	r24, 0x20	; 32
 22c:	8e 68       	ori	r24, 0x8E	; 142
 22e:	80 bd       	out	0x20, r24	; 32
 230:	08 95       	ret

00000232 <UART_SendString>:
	while (! (UCSR0A & (1<<UDRE0)));	/* Wait for empty transmit buffer*/
	UDR0 = ch ;
}

void UART_SendString(char *str)
{
 232:	0f 93       	push	r16
 234:	1f 93       	push	r17
 236:	cf 93       	push	r28
 238:	8c 01       	movw	r16, r24
	unsigned char j=0;
 23a:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (str[j]!=0)		/* Send string till null */
 23c:	03 c0       	rjmp	.+6      	; 0x244 <UART_SendString+0x12>
	{
		UART_TxChar(str[j]);	
 23e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <UART_TxChar>
		j++;
 242:	cf 5f       	subi	r28, 0xFF	; 255

void UART_SendString(char *str)
{
	unsigned char j=0;
	
	while (str[j]!=0)		/* Send string till null */
 244:	f8 01       	movw	r30, r16
 246:	ec 0f       	add	r30, r28
 248:	f1 1d       	adc	r31, r1
 24a:	80 81       	ld	r24, Z
 24c:	81 11       	cpse	r24, r1
 24e:	f7 cf       	rjmp	.-18     	; 0x23e <UART_SendString+0xc>
	{
		UART_TxChar(str[j]);	
		j++;
	}
}
 250:	cf 91       	pop	r28
 252:	1f 91       	pop	r17
 254:	0f 91       	pop	r16
 256:	08 95       	ret

00000258 <alternate_printf>:

void alternate_printf()
{
	UART_init(9600);
 258:	60 e8       	ldi	r22, 0x80	; 128
 25a:	75 e2       	ldi	r23, 0x25	; 37
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <UART_init>
	UART_SendString("\n\t UART initialized \n");
 264:	84 ef       	ldi	r24, 0xF4	; 244
 266:	91 e0       	ldi	r25, 0x01	; 1
 268:	0e 94 19 01 	call	0x232	; 0x232 <UART_SendString>
	
	fdevopen(UART_TxChar,UART_RxChar);	
 26c:	63 ee       	ldi	r22, 0xE3	; 227
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	87 ee       	ldi	r24, 0xE7	; 231
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	0e 94 bb 01 	call	0x376	; 0x376 <fdevopen>
 278:	08 95       	ret

0000027a <__udivmodsi4>:
 27a:	a1 e2       	ldi	r26, 0x21	; 33
 27c:	1a 2e       	mov	r1, r26
 27e:	aa 1b       	sub	r26, r26
 280:	bb 1b       	sub	r27, r27
 282:	fd 01       	movw	r30, r26
 284:	0d c0       	rjmp	.+26     	; 0x2a0 <__udivmodsi4_ep>

00000286 <__udivmodsi4_loop>:
 286:	aa 1f       	adc	r26, r26
 288:	bb 1f       	adc	r27, r27
 28a:	ee 1f       	adc	r30, r30
 28c:	ff 1f       	adc	r31, r31
 28e:	a2 17       	cp	r26, r18
 290:	b3 07       	cpc	r27, r19
 292:	e4 07       	cpc	r30, r20
 294:	f5 07       	cpc	r31, r21
 296:	20 f0       	brcs	.+8      	; 0x2a0 <__udivmodsi4_ep>
 298:	a2 1b       	sub	r26, r18
 29a:	b3 0b       	sbc	r27, r19
 29c:	e4 0b       	sbc	r30, r20
 29e:	f5 0b       	sbc	r31, r21

000002a0 <__udivmodsi4_ep>:
 2a0:	66 1f       	adc	r22, r22
 2a2:	77 1f       	adc	r23, r23
 2a4:	88 1f       	adc	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	1a 94       	dec	r1
 2aa:	69 f7       	brne	.-38     	; 0x286 <__udivmodsi4_loop>
 2ac:	60 95       	com	r22
 2ae:	70 95       	com	r23
 2b0:	80 95       	com	r24
 2b2:	90 95       	com	r25
 2b4:	9b 01       	movw	r18, r22
 2b6:	ac 01       	movw	r20, r24
 2b8:	bd 01       	movw	r22, r26
 2ba:	cf 01       	movw	r24, r30
 2bc:	08 95       	ret

000002be <do_rand>:
 2be:	8f 92       	push	r8
 2c0:	9f 92       	push	r9
 2c2:	af 92       	push	r10
 2c4:	bf 92       	push	r11
 2c6:	cf 92       	push	r12
 2c8:	df 92       	push	r13
 2ca:	ef 92       	push	r14
 2cc:	ff 92       	push	r15
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	ec 01       	movw	r28, r24
 2d4:	68 81       	ld	r22, Y
 2d6:	79 81       	ldd	r23, Y+1	; 0x01
 2d8:	8a 81       	ldd	r24, Y+2	; 0x02
 2da:	9b 81       	ldd	r25, Y+3	; 0x03
 2dc:	61 15       	cp	r22, r1
 2de:	71 05       	cpc	r23, r1
 2e0:	81 05       	cpc	r24, r1
 2e2:	91 05       	cpc	r25, r1
 2e4:	21 f4       	brne	.+8      	; 0x2ee <do_rand+0x30>
 2e6:	64 e2       	ldi	r22, 0x24	; 36
 2e8:	79 ed       	ldi	r23, 0xD9	; 217
 2ea:	8b e5       	ldi	r24, 0x5B	; 91
 2ec:	97 e0       	ldi	r25, 0x07	; 7
 2ee:	2d e1       	ldi	r18, 0x1D	; 29
 2f0:	33 ef       	ldi	r19, 0xF3	; 243
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	0e 94 21 06 	call	0xc42	; 0xc42 <__divmodsi4>
 2fa:	49 01       	movw	r8, r18
 2fc:	5a 01       	movw	r10, r20
 2fe:	9b 01       	movw	r18, r22
 300:	ac 01       	movw	r20, r24
 302:	a7 ea       	ldi	r26, 0xA7	; 167
 304:	b1 e4       	ldi	r27, 0x41	; 65
 306:	0e 94 40 06 	call	0xc80	; 0xc80 <__muluhisi3>
 30a:	6b 01       	movw	r12, r22
 30c:	7c 01       	movw	r14, r24
 30e:	ac ee       	ldi	r26, 0xEC	; 236
 310:	b4 ef       	ldi	r27, 0xF4	; 244
 312:	a5 01       	movw	r20, r10
 314:	94 01       	movw	r18, r8
 316:	0e 94 4e 06 	call	0xc9c	; 0xc9c <__mulohisi3>
 31a:	dc 01       	movw	r26, r24
 31c:	cb 01       	movw	r24, r22
 31e:	8c 0d       	add	r24, r12
 320:	9d 1d       	adc	r25, r13
 322:	ae 1d       	adc	r26, r14
 324:	bf 1d       	adc	r27, r15
 326:	b7 ff       	sbrs	r27, 7
 328:	03 c0       	rjmp	.+6      	; 0x330 <do_rand+0x72>
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	a1 09       	sbc	r26, r1
 32e:	b0 48       	sbci	r27, 0x80	; 128
 330:	88 83       	st	Y, r24
 332:	99 83       	std	Y+1, r25	; 0x01
 334:	aa 83       	std	Y+2, r26	; 0x02
 336:	bb 83       	std	Y+3, r27	; 0x03
 338:	9f 77       	andi	r25, 0x7F	; 127
 33a:	df 91       	pop	r29
 33c:	cf 91       	pop	r28
 33e:	ff 90       	pop	r15
 340:	ef 90       	pop	r14
 342:	df 90       	pop	r13
 344:	cf 90       	pop	r12
 346:	bf 90       	pop	r11
 348:	af 90       	pop	r10
 34a:	9f 90       	pop	r9
 34c:	8f 90       	pop	r8
 34e:	08 95       	ret

00000350 <rand_r>:
 350:	0e 94 5f 01 	call	0x2be	; 0x2be <do_rand>
 354:	08 95       	ret

00000356 <rand>:
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	91 e0       	ldi	r25, 0x01	; 1
 35a:	0e 94 5f 01 	call	0x2be	; 0x2be <do_rand>
 35e:	08 95       	ret

00000360 <srand>:
 360:	a0 e0       	ldi	r26, 0x00	; 0
 362:	b0 e0       	ldi	r27, 0x00	; 0
 364:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 368:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 36c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 370:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 374:	08 95       	ret

00000376 <fdevopen>:
 376:	0f 93       	push	r16
 378:	1f 93       	push	r17
 37a:	cf 93       	push	r28
 37c:	df 93       	push	r29
 37e:	00 97       	sbiw	r24, 0x00	; 0
 380:	31 f4       	brne	.+12     	; 0x38e <fdevopen+0x18>
 382:	61 15       	cp	r22, r1
 384:	71 05       	cpc	r23, r1
 386:	19 f4       	brne	.+6      	; 0x38e <fdevopen+0x18>
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	3a c0       	rjmp	.+116    	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 38e:	8b 01       	movw	r16, r22
 390:	ec 01       	movw	r28, r24
 392:	6e e0       	ldi	r22, 0x0E	; 14
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	0e 94 2d 04 	call	0x85a	; 0x85a <calloc>
 39e:	fc 01       	movw	r30, r24
 3a0:	89 2b       	or	r24, r25
 3a2:	91 f3       	breq	.-28     	; 0x388 <fdevopen+0x12>
 3a4:	80 e8       	ldi	r24, 0x80	; 128
 3a6:	83 83       	std	Z+3, r24	; 0x03
 3a8:	01 15       	cp	r16, r1
 3aa:	11 05       	cpc	r17, r1
 3ac:	71 f0       	breq	.+28     	; 0x3ca <fdevopen+0x54>
 3ae:	13 87       	std	Z+11, r17	; 0x0b
 3b0:	02 87       	std	Z+10, r16	; 0x0a
 3b2:	81 e8       	ldi	r24, 0x81	; 129
 3b4:	83 83       	std	Z+3, r24	; 0x03
 3b6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <__data_end>
 3ba:	90 91 0b 02 	lds	r25, 0x020B	; 0x80020b <__data_end+0x1>
 3be:	89 2b       	or	r24, r25
 3c0:	21 f4       	brne	.+8      	; 0x3ca <fdevopen+0x54>
 3c2:	f0 93 0b 02 	sts	0x020B, r31	; 0x80020b <__data_end+0x1>
 3c6:	e0 93 0a 02 	sts	0x020A, r30	; 0x80020a <__data_end>
 3ca:	20 97       	sbiw	r28, 0x00	; 0
 3cc:	c9 f0       	breq	.+50     	; 0x400 <__DATA_REGION_LENGTH__>
 3ce:	d1 87       	std	Z+9, r29	; 0x09
 3d0:	c0 87       	std	Z+8, r28	; 0x08
 3d2:	83 81       	ldd	r24, Z+3	; 0x03
 3d4:	82 60       	ori	r24, 0x02	; 2
 3d6:	83 83       	std	Z+3, r24	; 0x03
 3d8:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end+0x2>
 3dc:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x3>
 3e0:	89 2b       	or	r24, r25
 3e2:	71 f4       	brne	.+28     	; 0x400 <__DATA_REGION_LENGTH__>
 3e4:	f0 93 0d 02 	sts	0x020D, r31	; 0x80020d <__data_end+0x3>
 3e8:	e0 93 0c 02 	sts	0x020C, r30	; 0x80020c <__data_end+0x2>
 3ec:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <__data_end+0x4>
 3f0:	90 91 0f 02 	lds	r25, 0x020F	; 0x80020f <__data_end+0x5>
 3f4:	89 2b       	or	r24, r25
 3f6:	21 f4       	brne	.+8      	; 0x400 <__DATA_REGION_LENGTH__>
 3f8:	f0 93 0f 02 	sts	0x020F, r31	; 0x80020f <__data_end+0x5>
 3fc:	e0 93 0e 02 	sts	0x020E, r30	; 0x80020e <__data_end+0x4>
 400:	cf 01       	movw	r24, r30
 402:	df 91       	pop	r29
 404:	cf 91       	pop	r28
 406:	1f 91       	pop	r17
 408:	0f 91       	pop	r16
 40a:	08 95       	ret

0000040c <printf>:
 40c:	a0 e0       	ldi	r26, 0x00	; 0
 40e:	b0 e0       	ldi	r27, 0x00	; 0
 410:	ec e0       	ldi	r30, 0x0C	; 12
 412:	f2 e0       	ldi	r31, 0x02	; 2
 414:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__prologue_saves__+0x20>
 418:	ae 01       	movw	r20, r28
 41a:	4b 5f       	subi	r20, 0xFB	; 251
 41c:	5f 4f       	sbci	r21, 0xFF	; 255
 41e:	fa 01       	movw	r30, r20
 420:	61 91       	ld	r22, Z+
 422:	71 91       	ld	r23, Z+
 424:	af 01       	movw	r20, r30
 426:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end+0x2>
 42a:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <__data_end+0x3>
 42e:	0e 94 4c 02 	call	0x498	; 0x498 <vfprintf>
 432:	e2 e0       	ldi	r30, 0x02	; 2
 434:	0c 94 7f 06 	jmp	0xcfe	; 0xcfe <__epilogue_restores__+0x20>

00000438 <puts>:
 438:	0f 93       	push	r16
 43a:	1f 93       	push	r17
 43c:	cf 93       	push	r28
 43e:	df 93       	push	r29
 440:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <__data_end+0x2>
 444:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <__data_end+0x3>
 448:	23 81       	ldd	r18, Z+3	; 0x03
 44a:	21 ff       	sbrs	r18, 1
 44c:	1b c0       	rjmp	.+54     	; 0x484 <puts+0x4c>
 44e:	8c 01       	movw	r16, r24
 450:	d0 e0       	ldi	r29, 0x00	; 0
 452:	c0 e0       	ldi	r28, 0x00	; 0
 454:	f8 01       	movw	r30, r16
 456:	81 91       	ld	r24, Z+
 458:	8f 01       	movw	r16, r30
 45a:	60 91 0c 02 	lds	r22, 0x020C	; 0x80020c <__data_end+0x2>
 45e:	70 91 0d 02 	lds	r23, 0x020D	; 0x80020d <__data_end+0x3>
 462:	db 01       	movw	r26, r22
 464:	18 96       	adiw	r26, 0x08	; 8
 466:	ed 91       	ld	r30, X+
 468:	fc 91       	ld	r31, X
 46a:	19 97       	sbiw	r26, 0x09	; 9
 46c:	88 23       	and	r24, r24
 46e:	31 f0       	breq	.+12     	; 0x47c <puts+0x44>
 470:	09 95       	icall
 472:	89 2b       	or	r24, r25
 474:	79 f3       	breq	.-34     	; 0x454 <puts+0x1c>
 476:	df ef       	ldi	r29, 0xFF	; 255
 478:	cf ef       	ldi	r28, 0xFF	; 255
 47a:	ec cf       	rjmp	.-40     	; 0x454 <puts+0x1c>
 47c:	8a e0       	ldi	r24, 0x0A	; 10
 47e:	09 95       	icall
 480:	89 2b       	or	r24, r25
 482:	19 f0       	breq	.+6      	; 0x48a <puts+0x52>
 484:	8f ef       	ldi	r24, 0xFF	; 255
 486:	9f ef       	ldi	r25, 0xFF	; 255
 488:	02 c0       	rjmp	.+4      	; 0x48e <puts+0x56>
 48a:	8d 2f       	mov	r24, r29
 48c:	9c 2f       	mov	r25, r28
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	1f 91       	pop	r17
 494:	0f 91       	pop	r16
 496:	08 95       	ret

00000498 <vfprintf>:
 498:	ab e0       	ldi	r26, 0x0B	; 11
 49a:	b0 e0       	ldi	r27, 0x00	; 0
 49c:	e2 e5       	ldi	r30, 0x52	; 82
 49e:	f2 e0       	ldi	r31, 0x02	; 2
 4a0:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__prologue_saves__>
 4a4:	6c 01       	movw	r12, r24
 4a6:	7b 01       	movw	r14, r22
 4a8:	8a 01       	movw	r16, r20
 4aa:	fc 01       	movw	r30, r24
 4ac:	17 82       	std	Z+7, r1	; 0x07
 4ae:	16 82       	std	Z+6, r1	; 0x06
 4b0:	83 81       	ldd	r24, Z+3	; 0x03
 4b2:	81 ff       	sbrs	r24, 1
 4b4:	cc c1       	rjmp	.+920    	; 0x84e <__stack+0x34f>
 4b6:	ce 01       	movw	r24, r28
 4b8:	01 96       	adiw	r24, 0x01	; 1
 4ba:	3c 01       	movw	r6, r24
 4bc:	f6 01       	movw	r30, r12
 4be:	93 81       	ldd	r25, Z+3	; 0x03
 4c0:	f7 01       	movw	r30, r14
 4c2:	93 fd       	sbrc	r25, 3
 4c4:	85 91       	lpm	r24, Z+
 4c6:	93 ff       	sbrs	r25, 3
 4c8:	81 91       	ld	r24, Z+
 4ca:	7f 01       	movw	r14, r30
 4cc:	88 23       	and	r24, r24
 4ce:	09 f4       	brne	.+2      	; 0x4d2 <vfprintf+0x3a>
 4d0:	ba c1       	rjmp	.+884    	; 0x846 <__stack+0x347>
 4d2:	85 32       	cpi	r24, 0x25	; 37
 4d4:	39 f4       	brne	.+14     	; 0x4e4 <vfprintf+0x4c>
 4d6:	93 fd       	sbrc	r25, 3
 4d8:	85 91       	lpm	r24, Z+
 4da:	93 ff       	sbrs	r25, 3
 4dc:	81 91       	ld	r24, Z+
 4de:	7f 01       	movw	r14, r30
 4e0:	85 32       	cpi	r24, 0x25	; 37
 4e2:	29 f4       	brne	.+10     	; 0x4ee <vfprintf+0x56>
 4e4:	b6 01       	movw	r22, r12
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 87 05 	call	0xb0e	; 0xb0e <fputc>
 4ec:	e7 cf       	rjmp	.-50     	; 0x4bc <vfprintf+0x24>
 4ee:	91 2c       	mov	r9, r1
 4f0:	21 2c       	mov	r2, r1
 4f2:	31 2c       	mov	r3, r1
 4f4:	ff e1       	ldi	r31, 0x1F	; 31
 4f6:	f3 15       	cp	r31, r3
 4f8:	d8 f0       	brcs	.+54     	; 0x530 <__stack+0x31>
 4fa:	8b 32       	cpi	r24, 0x2B	; 43
 4fc:	79 f0       	breq	.+30     	; 0x51c <__stack+0x1d>
 4fe:	38 f4       	brcc	.+14     	; 0x50e <__stack+0xf>
 500:	80 32       	cpi	r24, 0x20	; 32
 502:	79 f0       	breq	.+30     	; 0x522 <__stack+0x23>
 504:	83 32       	cpi	r24, 0x23	; 35
 506:	a1 f4       	brne	.+40     	; 0x530 <__stack+0x31>
 508:	23 2d       	mov	r18, r3
 50a:	20 61       	ori	r18, 0x10	; 16
 50c:	1d c0       	rjmp	.+58     	; 0x548 <__stack+0x49>
 50e:	8d 32       	cpi	r24, 0x2D	; 45
 510:	61 f0       	breq	.+24     	; 0x52a <__stack+0x2b>
 512:	80 33       	cpi	r24, 0x30	; 48
 514:	69 f4       	brne	.+26     	; 0x530 <__stack+0x31>
 516:	23 2d       	mov	r18, r3
 518:	21 60       	ori	r18, 0x01	; 1
 51a:	16 c0       	rjmp	.+44     	; 0x548 <__stack+0x49>
 51c:	83 2d       	mov	r24, r3
 51e:	82 60       	ori	r24, 0x02	; 2
 520:	38 2e       	mov	r3, r24
 522:	e3 2d       	mov	r30, r3
 524:	e4 60       	ori	r30, 0x04	; 4
 526:	3e 2e       	mov	r3, r30
 528:	2a c0       	rjmp	.+84     	; 0x57e <__stack+0x7f>
 52a:	f3 2d       	mov	r31, r3
 52c:	f8 60       	ori	r31, 0x08	; 8
 52e:	1d c0       	rjmp	.+58     	; 0x56a <__stack+0x6b>
 530:	37 fc       	sbrc	r3, 7
 532:	2d c0       	rjmp	.+90     	; 0x58e <__stack+0x8f>
 534:	20 ed       	ldi	r18, 0xD0	; 208
 536:	28 0f       	add	r18, r24
 538:	2a 30       	cpi	r18, 0x0A	; 10
 53a:	40 f0       	brcs	.+16     	; 0x54c <__stack+0x4d>
 53c:	8e 32       	cpi	r24, 0x2E	; 46
 53e:	b9 f4       	brne	.+46     	; 0x56e <__stack+0x6f>
 540:	36 fc       	sbrc	r3, 6
 542:	81 c1       	rjmp	.+770    	; 0x846 <__stack+0x347>
 544:	23 2d       	mov	r18, r3
 546:	20 64       	ori	r18, 0x40	; 64
 548:	32 2e       	mov	r3, r18
 54a:	19 c0       	rjmp	.+50     	; 0x57e <__stack+0x7f>
 54c:	36 fe       	sbrs	r3, 6
 54e:	06 c0       	rjmp	.+12     	; 0x55c <__stack+0x5d>
 550:	8a e0       	ldi	r24, 0x0A	; 10
 552:	98 9e       	mul	r9, r24
 554:	20 0d       	add	r18, r0
 556:	11 24       	eor	r1, r1
 558:	92 2e       	mov	r9, r18
 55a:	11 c0       	rjmp	.+34     	; 0x57e <__stack+0x7f>
 55c:	ea e0       	ldi	r30, 0x0A	; 10
 55e:	2e 9e       	mul	r2, r30
 560:	20 0d       	add	r18, r0
 562:	11 24       	eor	r1, r1
 564:	22 2e       	mov	r2, r18
 566:	f3 2d       	mov	r31, r3
 568:	f0 62       	ori	r31, 0x20	; 32
 56a:	3f 2e       	mov	r3, r31
 56c:	08 c0       	rjmp	.+16     	; 0x57e <__stack+0x7f>
 56e:	8c 36       	cpi	r24, 0x6C	; 108
 570:	21 f4       	brne	.+8      	; 0x57a <__stack+0x7b>
 572:	83 2d       	mov	r24, r3
 574:	80 68       	ori	r24, 0x80	; 128
 576:	38 2e       	mov	r3, r24
 578:	02 c0       	rjmp	.+4      	; 0x57e <__stack+0x7f>
 57a:	88 36       	cpi	r24, 0x68	; 104
 57c:	41 f4       	brne	.+16     	; 0x58e <__stack+0x8f>
 57e:	f7 01       	movw	r30, r14
 580:	93 fd       	sbrc	r25, 3
 582:	85 91       	lpm	r24, Z+
 584:	93 ff       	sbrs	r25, 3
 586:	81 91       	ld	r24, Z+
 588:	7f 01       	movw	r14, r30
 58a:	81 11       	cpse	r24, r1
 58c:	b3 cf       	rjmp	.-154    	; 0x4f4 <vfprintf+0x5c>
 58e:	98 2f       	mov	r25, r24
 590:	9f 7d       	andi	r25, 0xDF	; 223
 592:	95 54       	subi	r25, 0x45	; 69
 594:	93 30       	cpi	r25, 0x03	; 3
 596:	28 f4       	brcc	.+10     	; 0x5a2 <__stack+0xa3>
 598:	0c 5f       	subi	r16, 0xFC	; 252
 59a:	1f 4f       	sbci	r17, 0xFF	; 255
 59c:	9f e3       	ldi	r25, 0x3F	; 63
 59e:	99 83       	std	Y+1, r25	; 0x01
 5a0:	0d c0       	rjmp	.+26     	; 0x5bc <__stack+0xbd>
 5a2:	83 36       	cpi	r24, 0x63	; 99
 5a4:	31 f0       	breq	.+12     	; 0x5b2 <__stack+0xb3>
 5a6:	83 37       	cpi	r24, 0x73	; 115
 5a8:	71 f0       	breq	.+28     	; 0x5c6 <__stack+0xc7>
 5aa:	83 35       	cpi	r24, 0x53	; 83
 5ac:	09 f0       	breq	.+2      	; 0x5b0 <__stack+0xb1>
 5ae:	59 c0       	rjmp	.+178    	; 0x662 <__stack+0x163>
 5b0:	21 c0       	rjmp	.+66     	; 0x5f4 <__stack+0xf5>
 5b2:	f8 01       	movw	r30, r16
 5b4:	80 81       	ld	r24, Z
 5b6:	89 83       	std	Y+1, r24	; 0x01
 5b8:	0e 5f       	subi	r16, 0xFE	; 254
 5ba:	1f 4f       	sbci	r17, 0xFF	; 255
 5bc:	88 24       	eor	r8, r8
 5be:	83 94       	inc	r8
 5c0:	91 2c       	mov	r9, r1
 5c2:	53 01       	movw	r10, r6
 5c4:	13 c0       	rjmp	.+38     	; 0x5ec <__stack+0xed>
 5c6:	28 01       	movw	r4, r16
 5c8:	f2 e0       	ldi	r31, 0x02	; 2
 5ca:	4f 0e       	add	r4, r31
 5cc:	51 1c       	adc	r5, r1
 5ce:	f8 01       	movw	r30, r16
 5d0:	a0 80       	ld	r10, Z
 5d2:	b1 80       	ldd	r11, Z+1	; 0x01
 5d4:	36 fe       	sbrs	r3, 6
 5d6:	03 c0       	rjmp	.+6      	; 0x5de <__stack+0xdf>
 5d8:	69 2d       	mov	r22, r9
 5da:	70 e0       	ldi	r23, 0x00	; 0
 5dc:	02 c0       	rjmp	.+4      	; 0x5e2 <__stack+0xe3>
 5de:	6f ef       	ldi	r22, 0xFF	; 255
 5e0:	7f ef       	ldi	r23, 0xFF	; 255
 5e2:	c5 01       	movw	r24, r10
 5e4:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <strnlen>
 5e8:	4c 01       	movw	r8, r24
 5ea:	82 01       	movw	r16, r4
 5ec:	f3 2d       	mov	r31, r3
 5ee:	ff 77       	andi	r31, 0x7F	; 127
 5f0:	3f 2e       	mov	r3, r31
 5f2:	16 c0       	rjmp	.+44     	; 0x620 <__stack+0x121>
 5f4:	28 01       	movw	r4, r16
 5f6:	22 e0       	ldi	r18, 0x02	; 2
 5f8:	42 0e       	add	r4, r18
 5fa:	51 1c       	adc	r5, r1
 5fc:	f8 01       	movw	r30, r16
 5fe:	a0 80       	ld	r10, Z
 600:	b1 80       	ldd	r11, Z+1	; 0x01
 602:	36 fe       	sbrs	r3, 6
 604:	03 c0       	rjmp	.+6      	; 0x60c <__stack+0x10d>
 606:	69 2d       	mov	r22, r9
 608:	70 e0       	ldi	r23, 0x00	; 0
 60a:	02 c0       	rjmp	.+4      	; 0x610 <__stack+0x111>
 60c:	6f ef       	ldi	r22, 0xFF	; 255
 60e:	7f ef       	ldi	r23, 0xFF	; 255
 610:	c5 01       	movw	r24, r10
 612:	0e 94 6a 05 	call	0xad4	; 0xad4 <strnlen_P>
 616:	4c 01       	movw	r8, r24
 618:	f3 2d       	mov	r31, r3
 61a:	f0 68       	ori	r31, 0x80	; 128
 61c:	3f 2e       	mov	r3, r31
 61e:	82 01       	movw	r16, r4
 620:	33 fc       	sbrc	r3, 3
 622:	1b c0       	rjmp	.+54     	; 0x65a <__stack+0x15b>
 624:	82 2d       	mov	r24, r2
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	88 16       	cp	r8, r24
 62a:	99 06       	cpc	r9, r25
 62c:	b0 f4       	brcc	.+44     	; 0x65a <__stack+0x15b>
 62e:	b6 01       	movw	r22, r12
 630:	80 e2       	ldi	r24, 0x20	; 32
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 87 05 	call	0xb0e	; 0xb0e <fputc>
 638:	2a 94       	dec	r2
 63a:	f4 cf       	rjmp	.-24     	; 0x624 <__stack+0x125>
 63c:	f5 01       	movw	r30, r10
 63e:	37 fc       	sbrc	r3, 7
 640:	85 91       	lpm	r24, Z+
 642:	37 fe       	sbrs	r3, 7
 644:	81 91       	ld	r24, Z+
 646:	5f 01       	movw	r10, r30
 648:	b6 01       	movw	r22, r12
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	0e 94 87 05 	call	0xb0e	; 0xb0e <fputc>
 650:	21 10       	cpse	r2, r1
 652:	2a 94       	dec	r2
 654:	21 e0       	ldi	r18, 0x01	; 1
 656:	82 1a       	sub	r8, r18
 658:	91 08       	sbc	r9, r1
 65a:	81 14       	cp	r8, r1
 65c:	91 04       	cpc	r9, r1
 65e:	71 f7       	brne	.-36     	; 0x63c <__stack+0x13d>
 660:	e8 c0       	rjmp	.+464    	; 0x832 <__stack+0x333>
 662:	84 36       	cpi	r24, 0x64	; 100
 664:	11 f0       	breq	.+4      	; 0x66a <__stack+0x16b>
 666:	89 36       	cpi	r24, 0x69	; 105
 668:	41 f5       	brne	.+80     	; 0x6ba <__stack+0x1bb>
 66a:	f8 01       	movw	r30, r16
 66c:	37 fe       	sbrs	r3, 7
 66e:	07 c0       	rjmp	.+14     	; 0x67e <__stack+0x17f>
 670:	60 81       	ld	r22, Z
 672:	71 81       	ldd	r23, Z+1	; 0x01
 674:	82 81       	ldd	r24, Z+2	; 0x02
 676:	93 81       	ldd	r25, Z+3	; 0x03
 678:	0c 5f       	subi	r16, 0xFC	; 252
 67a:	1f 4f       	sbci	r17, 0xFF	; 255
 67c:	08 c0       	rjmp	.+16     	; 0x68e <__stack+0x18f>
 67e:	60 81       	ld	r22, Z
 680:	71 81       	ldd	r23, Z+1	; 0x01
 682:	07 2e       	mov	r0, r23
 684:	00 0c       	add	r0, r0
 686:	88 0b       	sbc	r24, r24
 688:	99 0b       	sbc	r25, r25
 68a:	0e 5f       	subi	r16, 0xFE	; 254
 68c:	1f 4f       	sbci	r17, 0xFF	; 255
 68e:	f3 2d       	mov	r31, r3
 690:	ff 76       	andi	r31, 0x6F	; 111
 692:	3f 2e       	mov	r3, r31
 694:	97 ff       	sbrs	r25, 7
 696:	09 c0       	rjmp	.+18     	; 0x6aa <__stack+0x1ab>
 698:	90 95       	com	r25
 69a:	80 95       	com	r24
 69c:	70 95       	com	r23
 69e:	61 95       	neg	r22
 6a0:	7f 4f       	sbci	r23, 0xFF	; 255
 6a2:	8f 4f       	sbci	r24, 0xFF	; 255
 6a4:	9f 4f       	sbci	r25, 0xFF	; 255
 6a6:	f0 68       	ori	r31, 0x80	; 128
 6a8:	3f 2e       	mov	r3, r31
 6aa:	2a e0       	ldi	r18, 0x0A	; 10
 6ac:	30 e0       	ldi	r19, 0x00	; 0
 6ae:	a3 01       	movw	r20, r6
 6b0:	0e 94 c3 05 	call	0xb86	; 0xb86 <__ultoa_invert>
 6b4:	88 2e       	mov	r8, r24
 6b6:	86 18       	sub	r8, r6
 6b8:	45 c0       	rjmp	.+138    	; 0x744 <__stack+0x245>
 6ba:	85 37       	cpi	r24, 0x75	; 117
 6bc:	31 f4       	brne	.+12     	; 0x6ca <__stack+0x1cb>
 6be:	23 2d       	mov	r18, r3
 6c0:	2f 7e       	andi	r18, 0xEF	; 239
 6c2:	b2 2e       	mov	r11, r18
 6c4:	2a e0       	ldi	r18, 0x0A	; 10
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	25 c0       	rjmp	.+74     	; 0x714 <__stack+0x215>
 6ca:	93 2d       	mov	r25, r3
 6cc:	99 7f       	andi	r25, 0xF9	; 249
 6ce:	b9 2e       	mov	r11, r25
 6d0:	8f 36       	cpi	r24, 0x6F	; 111
 6d2:	c1 f0       	breq	.+48     	; 0x704 <__stack+0x205>
 6d4:	18 f4       	brcc	.+6      	; 0x6dc <__stack+0x1dd>
 6d6:	88 35       	cpi	r24, 0x58	; 88
 6d8:	79 f0       	breq	.+30     	; 0x6f8 <__stack+0x1f9>
 6da:	b5 c0       	rjmp	.+362    	; 0x846 <__stack+0x347>
 6dc:	80 37       	cpi	r24, 0x70	; 112
 6de:	19 f0       	breq	.+6      	; 0x6e6 <__stack+0x1e7>
 6e0:	88 37       	cpi	r24, 0x78	; 120
 6e2:	21 f0       	breq	.+8      	; 0x6ec <__stack+0x1ed>
 6e4:	b0 c0       	rjmp	.+352    	; 0x846 <__stack+0x347>
 6e6:	e9 2f       	mov	r30, r25
 6e8:	e0 61       	ori	r30, 0x10	; 16
 6ea:	be 2e       	mov	r11, r30
 6ec:	b4 fe       	sbrs	r11, 4
 6ee:	0d c0       	rjmp	.+26     	; 0x70a <__stack+0x20b>
 6f0:	fb 2d       	mov	r31, r11
 6f2:	f4 60       	ori	r31, 0x04	; 4
 6f4:	bf 2e       	mov	r11, r31
 6f6:	09 c0       	rjmp	.+18     	; 0x70a <__stack+0x20b>
 6f8:	34 fe       	sbrs	r3, 4
 6fa:	0a c0       	rjmp	.+20     	; 0x710 <__stack+0x211>
 6fc:	29 2f       	mov	r18, r25
 6fe:	26 60       	ori	r18, 0x06	; 6
 700:	b2 2e       	mov	r11, r18
 702:	06 c0       	rjmp	.+12     	; 0x710 <__stack+0x211>
 704:	28 e0       	ldi	r18, 0x08	; 8
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	05 c0       	rjmp	.+10     	; 0x714 <__stack+0x215>
 70a:	20 e1       	ldi	r18, 0x10	; 16
 70c:	30 e0       	ldi	r19, 0x00	; 0
 70e:	02 c0       	rjmp	.+4      	; 0x714 <__stack+0x215>
 710:	20 e1       	ldi	r18, 0x10	; 16
 712:	32 e0       	ldi	r19, 0x02	; 2
 714:	f8 01       	movw	r30, r16
 716:	b7 fe       	sbrs	r11, 7
 718:	07 c0       	rjmp	.+14     	; 0x728 <__stack+0x229>
 71a:	60 81       	ld	r22, Z
 71c:	71 81       	ldd	r23, Z+1	; 0x01
 71e:	82 81       	ldd	r24, Z+2	; 0x02
 720:	93 81       	ldd	r25, Z+3	; 0x03
 722:	0c 5f       	subi	r16, 0xFC	; 252
 724:	1f 4f       	sbci	r17, 0xFF	; 255
 726:	06 c0       	rjmp	.+12     	; 0x734 <__stack+0x235>
 728:	60 81       	ld	r22, Z
 72a:	71 81       	ldd	r23, Z+1	; 0x01
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	0e 5f       	subi	r16, 0xFE	; 254
 732:	1f 4f       	sbci	r17, 0xFF	; 255
 734:	a3 01       	movw	r20, r6
 736:	0e 94 c3 05 	call	0xb86	; 0xb86 <__ultoa_invert>
 73a:	88 2e       	mov	r8, r24
 73c:	86 18       	sub	r8, r6
 73e:	fb 2d       	mov	r31, r11
 740:	ff 77       	andi	r31, 0x7F	; 127
 742:	3f 2e       	mov	r3, r31
 744:	36 fe       	sbrs	r3, 6
 746:	0d c0       	rjmp	.+26     	; 0x762 <__stack+0x263>
 748:	23 2d       	mov	r18, r3
 74a:	2e 7f       	andi	r18, 0xFE	; 254
 74c:	a2 2e       	mov	r10, r18
 74e:	89 14       	cp	r8, r9
 750:	58 f4       	brcc	.+22     	; 0x768 <__stack+0x269>
 752:	34 fe       	sbrs	r3, 4
 754:	0b c0       	rjmp	.+22     	; 0x76c <__stack+0x26d>
 756:	32 fc       	sbrc	r3, 2
 758:	09 c0       	rjmp	.+18     	; 0x76c <__stack+0x26d>
 75a:	83 2d       	mov	r24, r3
 75c:	8e 7e       	andi	r24, 0xEE	; 238
 75e:	a8 2e       	mov	r10, r24
 760:	05 c0       	rjmp	.+10     	; 0x76c <__stack+0x26d>
 762:	b8 2c       	mov	r11, r8
 764:	a3 2c       	mov	r10, r3
 766:	03 c0       	rjmp	.+6      	; 0x76e <__stack+0x26f>
 768:	b8 2c       	mov	r11, r8
 76a:	01 c0       	rjmp	.+2      	; 0x76e <__stack+0x26f>
 76c:	b9 2c       	mov	r11, r9
 76e:	a4 fe       	sbrs	r10, 4
 770:	0f c0       	rjmp	.+30     	; 0x790 <__stack+0x291>
 772:	fe 01       	movw	r30, r28
 774:	e8 0d       	add	r30, r8
 776:	f1 1d       	adc	r31, r1
 778:	80 81       	ld	r24, Z
 77a:	80 33       	cpi	r24, 0x30	; 48
 77c:	21 f4       	brne	.+8      	; 0x786 <__stack+0x287>
 77e:	9a 2d       	mov	r25, r10
 780:	99 7e       	andi	r25, 0xE9	; 233
 782:	a9 2e       	mov	r10, r25
 784:	09 c0       	rjmp	.+18     	; 0x798 <__stack+0x299>
 786:	a2 fe       	sbrs	r10, 2
 788:	06 c0       	rjmp	.+12     	; 0x796 <__stack+0x297>
 78a:	b3 94       	inc	r11
 78c:	b3 94       	inc	r11
 78e:	04 c0       	rjmp	.+8      	; 0x798 <__stack+0x299>
 790:	8a 2d       	mov	r24, r10
 792:	86 78       	andi	r24, 0x86	; 134
 794:	09 f0       	breq	.+2      	; 0x798 <__stack+0x299>
 796:	b3 94       	inc	r11
 798:	a3 fc       	sbrc	r10, 3
 79a:	11 c0       	rjmp	.+34     	; 0x7be <__stack+0x2bf>
 79c:	a0 fe       	sbrs	r10, 0
 79e:	06 c0       	rjmp	.+12     	; 0x7ac <__stack+0x2ad>
 7a0:	b2 14       	cp	r11, r2
 7a2:	88 f4       	brcc	.+34     	; 0x7c6 <__stack+0x2c7>
 7a4:	28 0c       	add	r2, r8
 7a6:	92 2c       	mov	r9, r2
 7a8:	9b 18       	sub	r9, r11
 7aa:	0e c0       	rjmp	.+28     	; 0x7c8 <__stack+0x2c9>
 7ac:	b2 14       	cp	r11, r2
 7ae:	60 f4       	brcc	.+24     	; 0x7c8 <__stack+0x2c9>
 7b0:	b6 01       	movw	r22, r12
 7b2:	80 e2       	ldi	r24, 0x20	; 32
 7b4:	90 e0       	ldi	r25, 0x00	; 0
 7b6:	0e 94 87 05 	call	0xb0e	; 0xb0e <fputc>
 7ba:	b3 94       	inc	r11
 7bc:	f7 cf       	rjmp	.-18     	; 0x7ac <__stack+0x2ad>
 7be:	b2 14       	cp	r11, r2
 7c0:	18 f4       	brcc	.+6      	; 0x7c8 <__stack+0x2c9>
 7c2:	2b 18       	sub	r2, r11
 7c4:	02 c0       	rjmp	.+4      	; 0x7ca <__stack+0x2cb>
 7c6:	98 2c       	mov	r9, r8
 7c8:	21 2c       	mov	r2, r1
 7ca:	a4 fe       	sbrs	r10, 4
 7cc:	10 c0       	rjmp	.+32     	; 0x7ee <__stack+0x2ef>
 7ce:	b6 01       	movw	r22, r12
 7d0:	80 e3       	ldi	r24, 0x30	; 48
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	0e 94 87 05 	call	0xb0e	; 0xb0e <fputc>
 7d8:	a2 fe       	sbrs	r10, 2
 7da:	17 c0       	rjmp	.+46     	; 0x80a <__stack+0x30b>
 7dc:	a1 fc       	sbrc	r10, 1
 7de:	03 c0       	rjmp	.+6      	; 0x7e6 <__stack+0x2e7>
 7e0:	88 e7       	ldi	r24, 0x78	; 120
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <__stack+0x2eb>
 7e6:	88 e5       	ldi	r24, 0x58	; 88
 7e8:	90 e0       	ldi	r25, 0x00	; 0
 7ea:	b6 01       	movw	r22, r12
 7ec:	0c c0       	rjmp	.+24     	; 0x806 <__stack+0x307>
 7ee:	8a 2d       	mov	r24, r10
 7f0:	86 78       	andi	r24, 0x86	; 134
 7f2:	59 f0       	breq	.+22     	; 0x80a <__stack+0x30b>
 7f4:	a1 fe       	sbrs	r10, 1
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <__stack+0x2fd>
 7f8:	8b e2       	ldi	r24, 0x2B	; 43
 7fa:	01 c0       	rjmp	.+2      	; 0x7fe <__stack+0x2ff>
 7fc:	80 e2       	ldi	r24, 0x20	; 32
 7fe:	a7 fc       	sbrc	r10, 7
 800:	8d e2       	ldi	r24, 0x2D	; 45
 802:	b6 01       	movw	r22, r12
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	0e 94 87 05 	call	0xb0e	; 0xb0e <fputc>
 80a:	89 14       	cp	r8, r9
 80c:	38 f4       	brcc	.+14     	; 0x81c <__stack+0x31d>
 80e:	b6 01       	movw	r22, r12
 810:	80 e3       	ldi	r24, 0x30	; 48
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	0e 94 87 05 	call	0xb0e	; 0xb0e <fputc>
 818:	9a 94       	dec	r9
 81a:	f7 cf       	rjmp	.-18     	; 0x80a <__stack+0x30b>
 81c:	8a 94       	dec	r8
 81e:	f3 01       	movw	r30, r6
 820:	e8 0d       	add	r30, r8
 822:	f1 1d       	adc	r31, r1
 824:	80 81       	ld	r24, Z
 826:	b6 01       	movw	r22, r12
 828:	90 e0       	ldi	r25, 0x00	; 0
 82a:	0e 94 87 05 	call	0xb0e	; 0xb0e <fputc>
 82e:	81 10       	cpse	r8, r1
 830:	f5 cf       	rjmp	.-22     	; 0x81c <__stack+0x31d>
 832:	22 20       	and	r2, r2
 834:	09 f4       	brne	.+2      	; 0x838 <__stack+0x339>
 836:	42 ce       	rjmp	.-892    	; 0x4bc <vfprintf+0x24>
 838:	b6 01       	movw	r22, r12
 83a:	80 e2       	ldi	r24, 0x20	; 32
 83c:	90 e0       	ldi	r25, 0x00	; 0
 83e:	0e 94 87 05 	call	0xb0e	; 0xb0e <fputc>
 842:	2a 94       	dec	r2
 844:	f6 cf       	rjmp	.-20     	; 0x832 <__stack+0x333>
 846:	f6 01       	movw	r30, r12
 848:	86 81       	ldd	r24, Z+6	; 0x06
 84a:	97 81       	ldd	r25, Z+7	; 0x07
 84c:	02 c0       	rjmp	.+4      	; 0x852 <__stack+0x353>
 84e:	8f ef       	ldi	r24, 0xFF	; 255
 850:	9f ef       	ldi	r25, 0xFF	; 255
 852:	2b 96       	adiw	r28, 0x0b	; 11
 854:	e2 e1       	ldi	r30, 0x12	; 18
 856:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__epilogue_restores__>

0000085a <calloc>:
 85a:	0f 93       	push	r16
 85c:	1f 93       	push	r17
 85e:	cf 93       	push	r28
 860:	df 93       	push	r29
 862:	86 9f       	mul	r24, r22
 864:	80 01       	movw	r16, r0
 866:	87 9f       	mul	r24, r23
 868:	10 0d       	add	r17, r0
 86a:	96 9f       	mul	r25, r22
 86c:	10 0d       	add	r17, r0
 86e:	11 24       	eor	r1, r1
 870:	c8 01       	movw	r24, r16
 872:	0e 94 49 04 	call	0x892	; 0x892 <malloc>
 876:	ec 01       	movw	r28, r24
 878:	00 97       	sbiw	r24, 0x00	; 0
 87a:	29 f0       	breq	.+10     	; 0x886 <calloc+0x2c>
 87c:	a8 01       	movw	r20, r16
 87e:	60 e0       	ldi	r22, 0x00	; 0
 880:	70 e0       	ldi	r23, 0x00	; 0
 882:	0e 94 75 05 	call	0xaea	; 0xaea <memset>
 886:	ce 01       	movw	r24, r28
 888:	df 91       	pop	r29
 88a:	cf 91       	pop	r28
 88c:	1f 91       	pop	r17
 88e:	0f 91       	pop	r16
 890:	08 95       	ret

00000892 <malloc>:
 892:	0f 93       	push	r16
 894:	1f 93       	push	r17
 896:	cf 93       	push	r28
 898:	df 93       	push	r29
 89a:	82 30       	cpi	r24, 0x02	; 2
 89c:	91 05       	cpc	r25, r1
 89e:	10 f4       	brcc	.+4      	; 0x8a4 <malloc+0x12>
 8a0:	82 e0       	ldi	r24, 0x02	; 2
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <__flp>
 8a8:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <__flp+0x1>
 8ac:	20 e0       	ldi	r18, 0x00	; 0
 8ae:	30 e0       	ldi	r19, 0x00	; 0
 8b0:	a0 e0       	ldi	r26, 0x00	; 0
 8b2:	b0 e0       	ldi	r27, 0x00	; 0
 8b4:	30 97       	sbiw	r30, 0x00	; 0
 8b6:	19 f1       	breq	.+70     	; 0x8fe <malloc+0x6c>
 8b8:	40 81       	ld	r20, Z
 8ba:	51 81       	ldd	r21, Z+1	; 0x01
 8bc:	02 81       	ldd	r16, Z+2	; 0x02
 8be:	13 81       	ldd	r17, Z+3	; 0x03
 8c0:	48 17       	cp	r20, r24
 8c2:	59 07       	cpc	r21, r25
 8c4:	c8 f0       	brcs	.+50     	; 0x8f8 <malloc+0x66>
 8c6:	84 17       	cp	r24, r20
 8c8:	95 07       	cpc	r25, r21
 8ca:	69 f4       	brne	.+26     	; 0x8e6 <malloc+0x54>
 8cc:	10 97       	sbiw	r26, 0x00	; 0
 8ce:	31 f0       	breq	.+12     	; 0x8dc <malloc+0x4a>
 8d0:	12 96       	adiw	r26, 0x02	; 2
 8d2:	0c 93       	st	X, r16
 8d4:	12 97       	sbiw	r26, 0x02	; 2
 8d6:	13 96       	adiw	r26, 0x03	; 3
 8d8:	1c 93       	st	X, r17
 8da:	27 c0       	rjmp	.+78     	; 0x92a <malloc+0x98>
 8dc:	00 93 12 02 	sts	0x0212, r16	; 0x800212 <__flp>
 8e0:	10 93 13 02 	sts	0x0213, r17	; 0x800213 <__flp+0x1>
 8e4:	22 c0       	rjmp	.+68     	; 0x92a <malloc+0x98>
 8e6:	21 15       	cp	r18, r1
 8e8:	31 05       	cpc	r19, r1
 8ea:	19 f0       	breq	.+6      	; 0x8f2 <malloc+0x60>
 8ec:	42 17       	cp	r20, r18
 8ee:	53 07       	cpc	r21, r19
 8f0:	18 f4       	brcc	.+6      	; 0x8f8 <malloc+0x66>
 8f2:	9a 01       	movw	r18, r20
 8f4:	bd 01       	movw	r22, r26
 8f6:	ef 01       	movw	r28, r30
 8f8:	df 01       	movw	r26, r30
 8fa:	f8 01       	movw	r30, r16
 8fc:	db cf       	rjmp	.-74     	; 0x8b4 <malloc+0x22>
 8fe:	21 15       	cp	r18, r1
 900:	31 05       	cpc	r19, r1
 902:	f9 f0       	breq	.+62     	; 0x942 <malloc+0xb0>
 904:	28 1b       	sub	r18, r24
 906:	39 0b       	sbc	r19, r25
 908:	24 30       	cpi	r18, 0x04	; 4
 90a:	31 05       	cpc	r19, r1
 90c:	80 f4       	brcc	.+32     	; 0x92e <malloc+0x9c>
 90e:	8a 81       	ldd	r24, Y+2	; 0x02
 910:	9b 81       	ldd	r25, Y+3	; 0x03
 912:	61 15       	cp	r22, r1
 914:	71 05       	cpc	r23, r1
 916:	21 f0       	breq	.+8      	; 0x920 <malloc+0x8e>
 918:	fb 01       	movw	r30, r22
 91a:	93 83       	std	Z+3, r25	; 0x03
 91c:	82 83       	std	Z+2, r24	; 0x02
 91e:	04 c0       	rjmp	.+8      	; 0x928 <malloc+0x96>
 920:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <__flp+0x1>
 924:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <__flp>
 928:	fe 01       	movw	r30, r28
 92a:	32 96       	adiw	r30, 0x02	; 2
 92c:	44 c0       	rjmp	.+136    	; 0x9b6 <malloc+0x124>
 92e:	fe 01       	movw	r30, r28
 930:	e2 0f       	add	r30, r18
 932:	f3 1f       	adc	r31, r19
 934:	81 93       	st	Z+, r24
 936:	91 93       	st	Z+, r25
 938:	22 50       	subi	r18, 0x02	; 2
 93a:	31 09       	sbc	r19, r1
 93c:	39 83       	std	Y+1, r19	; 0x01
 93e:	28 83       	st	Y, r18
 940:	3a c0       	rjmp	.+116    	; 0x9b6 <malloc+0x124>
 942:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__brkval>
 946:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__brkval+0x1>
 94a:	23 2b       	or	r18, r19
 94c:	41 f4       	brne	.+16     	; 0x95e <malloc+0xcc>
 94e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <__malloc_heap_start>
 952:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <__malloc_heap_start+0x1>
 956:	30 93 11 02 	sts	0x0211, r19	; 0x800211 <__brkval+0x1>
 95a:	20 93 10 02 	sts	0x0210, r18	; 0x800210 <__brkval>
 95e:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <__malloc_heap_end>
 962:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <__malloc_heap_end+0x1>
 966:	21 15       	cp	r18, r1
 968:	31 05       	cpc	r19, r1
 96a:	41 f4       	brne	.+16     	; 0x97c <malloc+0xea>
 96c:	2d b7       	in	r18, 0x3d	; 61
 96e:	3e b7       	in	r19, 0x3e	; 62
 970:	40 91 08 01 	lds	r20, 0x0108	; 0x800108 <__malloc_margin>
 974:	50 91 09 01 	lds	r21, 0x0109	; 0x800109 <__malloc_margin+0x1>
 978:	24 1b       	sub	r18, r20
 97a:	35 0b       	sbc	r19, r21
 97c:	e0 91 10 02 	lds	r30, 0x0210	; 0x800210 <__brkval>
 980:	f0 91 11 02 	lds	r31, 0x0211	; 0x800211 <__brkval+0x1>
 984:	e2 17       	cp	r30, r18
 986:	f3 07       	cpc	r31, r19
 988:	a0 f4       	brcc	.+40     	; 0x9b2 <malloc+0x120>
 98a:	2e 1b       	sub	r18, r30
 98c:	3f 0b       	sbc	r19, r31
 98e:	28 17       	cp	r18, r24
 990:	39 07       	cpc	r19, r25
 992:	78 f0       	brcs	.+30     	; 0x9b2 <malloc+0x120>
 994:	ac 01       	movw	r20, r24
 996:	4e 5f       	subi	r20, 0xFE	; 254
 998:	5f 4f       	sbci	r21, 0xFF	; 255
 99a:	24 17       	cp	r18, r20
 99c:	35 07       	cpc	r19, r21
 99e:	48 f0       	brcs	.+18     	; 0x9b2 <malloc+0x120>
 9a0:	4e 0f       	add	r20, r30
 9a2:	5f 1f       	adc	r21, r31
 9a4:	50 93 11 02 	sts	0x0211, r21	; 0x800211 <__brkval+0x1>
 9a8:	40 93 10 02 	sts	0x0210, r20	; 0x800210 <__brkval>
 9ac:	81 93       	st	Z+, r24
 9ae:	91 93       	st	Z+, r25
 9b0:	02 c0       	rjmp	.+4      	; 0x9b6 <malloc+0x124>
 9b2:	e0 e0       	ldi	r30, 0x00	; 0
 9b4:	f0 e0       	ldi	r31, 0x00	; 0
 9b6:	cf 01       	movw	r24, r30
 9b8:	df 91       	pop	r29
 9ba:	cf 91       	pop	r28
 9bc:	1f 91       	pop	r17
 9be:	0f 91       	pop	r16
 9c0:	08 95       	ret

000009c2 <free>:
 9c2:	cf 93       	push	r28
 9c4:	df 93       	push	r29
 9c6:	00 97       	sbiw	r24, 0x00	; 0
 9c8:	09 f4       	brne	.+2      	; 0x9cc <free+0xa>
 9ca:	81 c0       	rjmp	.+258    	; 0xace <free+0x10c>
 9cc:	fc 01       	movw	r30, r24
 9ce:	32 97       	sbiw	r30, 0x02	; 2
 9d0:	13 82       	std	Z+3, r1	; 0x03
 9d2:	12 82       	std	Z+2, r1	; 0x02
 9d4:	a0 91 12 02 	lds	r26, 0x0212	; 0x800212 <__flp>
 9d8:	b0 91 13 02 	lds	r27, 0x0213	; 0x800213 <__flp+0x1>
 9dc:	10 97       	sbiw	r26, 0x00	; 0
 9de:	81 f4       	brne	.+32     	; 0xa00 <free+0x3e>
 9e0:	20 81       	ld	r18, Z
 9e2:	31 81       	ldd	r19, Z+1	; 0x01
 9e4:	82 0f       	add	r24, r18
 9e6:	93 1f       	adc	r25, r19
 9e8:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__brkval>
 9ec:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__brkval+0x1>
 9f0:	28 17       	cp	r18, r24
 9f2:	39 07       	cpc	r19, r25
 9f4:	51 f5       	brne	.+84     	; 0xa4a <free+0x88>
 9f6:	f0 93 11 02 	sts	0x0211, r31	; 0x800211 <__brkval+0x1>
 9fa:	e0 93 10 02 	sts	0x0210, r30	; 0x800210 <__brkval>
 9fe:	67 c0       	rjmp	.+206    	; 0xace <free+0x10c>
 a00:	ed 01       	movw	r28, r26
 a02:	20 e0       	ldi	r18, 0x00	; 0
 a04:	30 e0       	ldi	r19, 0x00	; 0
 a06:	ce 17       	cp	r28, r30
 a08:	df 07       	cpc	r29, r31
 a0a:	40 f4       	brcc	.+16     	; 0xa1c <free+0x5a>
 a0c:	4a 81       	ldd	r20, Y+2	; 0x02
 a0e:	5b 81       	ldd	r21, Y+3	; 0x03
 a10:	9e 01       	movw	r18, r28
 a12:	41 15       	cp	r20, r1
 a14:	51 05       	cpc	r21, r1
 a16:	f1 f0       	breq	.+60     	; 0xa54 <free+0x92>
 a18:	ea 01       	movw	r28, r20
 a1a:	f5 cf       	rjmp	.-22     	; 0xa06 <free+0x44>
 a1c:	d3 83       	std	Z+3, r29	; 0x03
 a1e:	c2 83       	std	Z+2, r28	; 0x02
 a20:	40 81       	ld	r20, Z
 a22:	51 81       	ldd	r21, Z+1	; 0x01
 a24:	84 0f       	add	r24, r20
 a26:	95 1f       	adc	r25, r21
 a28:	c8 17       	cp	r28, r24
 a2a:	d9 07       	cpc	r29, r25
 a2c:	59 f4       	brne	.+22     	; 0xa44 <free+0x82>
 a2e:	88 81       	ld	r24, Y
 a30:	99 81       	ldd	r25, Y+1	; 0x01
 a32:	84 0f       	add	r24, r20
 a34:	95 1f       	adc	r25, r21
 a36:	02 96       	adiw	r24, 0x02	; 2
 a38:	91 83       	std	Z+1, r25	; 0x01
 a3a:	80 83       	st	Z, r24
 a3c:	8a 81       	ldd	r24, Y+2	; 0x02
 a3e:	9b 81       	ldd	r25, Y+3	; 0x03
 a40:	93 83       	std	Z+3, r25	; 0x03
 a42:	82 83       	std	Z+2, r24	; 0x02
 a44:	21 15       	cp	r18, r1
 a46:	31 05       	cpc	r19, r1
 a48:	29 f4       	brne	.+10     	; 0xa54 <free+0x92>
 a4a:	f0 93 13 02 	sts	0x0213, r31	; 0x800213 <__flp+0x1>
 a4e:	e0 93 12 02 	sts	0x0212, r30	; 0x800212 <__flp>
 a52:	3d c0       	rjmp	.+122    	; 0xace <free+0x10c>
 a54:	e9 01       	movw	r28, r18
 a56:	fb 83       	std	Y+3, r31	; 0x03
 a58:	ea 83       	std	Y+2, r30	; 0x02
 a5a:	49 91       	ld	r20, Y+
 a5c:	59 91       	ld	r21, Y+
 a5e:	c4 0f       	add	r28, r20
 a60:	d5 1f       	adc	r29, r21
 a62:	ec 17       	cp	r30, r28
 a64:	fd 07       	cpc	r31, r29
 a66:	61 f4       	brne	.+24     	; 0xa80 <free+0xbe>
 a68:	80 81       	ld	r24, Z
 a6a:	91 81       	ldd	r25, Z+1	; 0x01
 a6c:	84 0f       	add	r24, r20
 a6e:	95 1f       	adc	r25, r21
 a70:	02 96       	adiw	r24, 0x02	; 2
 a72:	e9 01       	movw	r28, r18
 a74:	99 83       	std	Y+1, r25	; 0x01
 a76:	88 83       	st	Y, r24
 a78:	82 81       	ldd	r24, Z+2	; 0x02
 a7a:	93 81       	ldd	r25, Z+3	; 0x03
 a7c:	9b 83       	std	Y+3, r25	; 0x03
 a7e:	8a 83       	std	Y+2, r24	; 0x02
 a80:	e0 e0       	ldi	r30, 0x00	; 0
 a82:	f0 e0       	ldi	r31, 0x00	; 0
 a84:	12 96       	adiw	r26, 0x02	; 2
 a86:	8d 91       	ld	r24, X+
 a88:	9c 91       	ld	r25, X
 a8a:	13 97       	sbiw	r26, 0x03	; 3
 a8c:	00 97       	sbiw	r24, 0x00	; 0
 a8e:	19 f0       	breq	.+6      	; 0xa96 <free+0xd4>
 a90:	fd 01       	movw	r30, r26
 a92:	dc 01       	movw	r26, r24
 a94:	f7 cf       	rjmp	.-18     	; 0xa84 <free+0xc2>
 a96:	8d 91       	ld	r24, X+
 a98:	9c 91       	ld	r25, X
 a9a:	11 97       	sbiw	r26, 0x01	; 1
 a9c:	9d 01       	movw	r18, r26
 a9e:	2e 5f       	subi	r18, 0xFE	; 254
 aa0:	3f 4f       	sbci	r19, 0xFF	; 255
 aa2:	82 0f       	add	r24, r18
 aa4:	93 1f       	adc	r25, r19
 aa6:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <__brkval>
 aaa:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <__brkval+0x1>
 aae:	28 17       	cp	r18, r24
 ab0:	39 07       	cpc	r19, r25
 ab2:	69 f4       	brne	.+26     	; 0xace <free+0x10c>
 ab4:	30 97       	sbiw	r30, 0x00	; 0
 ab6:	29 f4       	brne	.+10     	; 0xac2 <free+0x100>
 ab8:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <__flp+0x1>
 abc:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <__flp>
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <free+0x104>
 ac2:	13 82       	std	Z+3, r1	; 0x03
 ac4:	12 82       	std	Z+2, r1	; 0x02
 ac6:	b0 93 11 02 	sts	0x0211, r27	; 0x800211 <__brkval+0x1>
 aca:	a0 93 10 02 	sts	0x0210, r26	; 0x800210 <__brkval>
 ace:	df 91       	pop	r29
 ad0:	cf 91       	pop	r28
 ad2:	08 95       	ret

00000ad4 <strnlen_P>:
 ad4:	fc 01       	movw	r30, r24
 ad6:	05 90       	lpm	r0, Z+
 ad8:	61 50       	subi	r22, 0x01	; 1
 ada:	70 40       	sbci	r23, 0x00	; 0
 adc:	01 10       	cpse	r0, r1
 ade:	d8 f7       	brcc	.-10     	; 0xad6 <strnlen_P+0x2>
 ae0:	80 95       	com	r24
 ae2:	90 95       	com	r25
 ae4:	8e 0f       	add	r24, r30
 ae6:	9f 1f       	adc	r25, r31
 ae8:	08 95       	ret

00000aea <memset>:
 aea:	dc 01       	movw	r26, r24
 aec:	01 c0       	rjmp	.+2      	; 0xaf0 <memset+0x6>
 aee:	6d 93       	st	X+, r22
 af0:	41 50       	subi	r20, 0x01	; 1
 af2:	50 40       	sbci	r21, 0x00	; 0
 af4:	e0 f7       	brcc	.-8      	; 0xaee <memset+0x4>
 af6:	08 95       	ret

00000af8 <strnlen>:
 af8:	fc 01       	movw	r30, r24
 afa:	61 50       	subi	r22, 0x01	; 1
 afc:	70 40       	sbci	r23, 0x00	; 0
 afe:	01 90       	ld	r0, Z+
 b00:	01 10       	cpse	r0, r1
 b02:	d8 f7       	brcc	.-10     	; 0xafa <strnlen+0x2>
 b04:	80 95       	com	r24
 b06:	90 95       	com	r25
 b08:	8e 0f       	add	r24, r30
 b0a:	9f 1f       	adc	r25, r31
 b0c:	08 95       	ret

00000b0e <fputc>:
 b0e:	0f 93       	push	r16
 b10:	1f 93       	push	r17
 b12:	cf 93       	push	r28
 b14:	df 93       	push	r29
 b16:	fb 01       	movw	r30, r22
 b18:	23 81       	ldd	r18, Z+3	; 0x03
 b1a:	21 fd       	sbrc	r18, 1
 b1c:	03 c0       	rjmp	.+6      	; 0xb24 <fputc+0x16>
 b1e:	8f ef       	ldi	r24, 0xFF	; 255
 b20:	9f ef       	ldi	r25, 0xFF	; 255
 b22:	2c c0       	rjmp	.+88     	; 0xb7c <fputc+0x6e>
 b24:	22 ff       	sbrs	r18, 2
 b26:	16 c0       	rjmp	.+44     	; 0xb54 <fputc+0x46>
 b28:	46 81       	ldd	r20, Z+6	; 0x06
 b2a:	57 81       	ldd	r21, Z+7	; 0x07
 b2c:	24 81       	ldd	r18, Z+4	; 0x04
 b2e:	35 81       	ldd	r19, Z+5	; 0x05
 b30:	42 17       	cp	r20, r18
 b32:	53 07       	cpc	r21, r19
 b34:	44 f4       	brge	.+16     	; 0xb46 <fputc+0x38>
 b36:	a0 81       	ld	r26, Z
 b38:	b1 81       	ldd	r27, Z+1	; 0x01
 b3a:	9d 01       	movw	r18, r26
 b3c:	2f 5f       	subi	r18, 0xFF	; 255
 b3e:	3f 4f       	sbci	r19, 0xFF	; 255
 b40:	31 83       	std	Z+1, r19	; 0x01
 b42:	20 83       	st	Z, r18
 b44:	8c 93       	st	X, r24
 b46:	26 81       	ldd	r18, Z+6	; 0x06
 b48:	37 81       	ldd	r19, Z+7	; 0x07
 b4a:	2f 5f       	subi	r18, 0xFF	; 255
 b4c:	3f 4f       	sbci	r19, 0xFF	; 255
 b4e:	37 83       	std	Z+7, r19	; 0x07
 b50:	26 83       	std	Z+6, r18	; 0x06
 b52:	14 c0       	rjmp	.+40     	; 0xb7c <fputc+0x6e>
 b54:	8b 01       	movw	r16, r22
 b56:	ec 01       	movw	r28, r24
 b58:	fb 01       	movw	r30, r22
 b5a:	00 84       	ldd	r0, Z+8	; 0x08
 b5c:	f1 85       	ldd	r31, Z+9	; 0x09
 b5e:	e0 2d       	mov	r30, r0
 b60:	09 95       	icall
 b62:	89 2b       	or	r24, r25
 b64:	e1 f6       	brne	.-72     	; 0xb1e <fputc+0x10>
 b66:	d8 01       	movw	r26, r16
 b68:	16 96       	adiw	r26, 0x06	; 6
 b6a:	8d 91       	ld	r24, X+
 b6c:	9c 91       	ld	r25, X
 b6e:	17 97       	sbiw	r26, 0x07	; 7
 b70:	01 96       	adiw	r24, 0x01	; 1
 b72:	17 96       	adiw	r26, 0x07	; 7
 b74:	9c 93       	st	X, r25
 b76:	8e 93       	st	-X, r24
 b78:	16 97       	sbiw	r26, 0x06	; 6
 b7a:	ce 01       	movw	r24, r28
 b7c:	df 91       	pop	r29
 b7e:	cf 91       	pop	r28
 b80:	1f 91       	pop	r17
 b82:	0f 91       	pop	r16
 b84:	08 95       	ret

00000b86 <__ultoa_invert>:
 b86:	fa 01       	movw	r30, r20
 b88:	aa 27       	eor	r26, r26
 b8a:	28 30       	cpi	r18, 0x08	; 8
 b8c:	51 f1       	breq	.+84     	; 0xbe2 <__ultoa_invert+0x5c>
 b8e:	20 31       	cpi	r18, 0x10	; 16
 b90:	81 f1       	breq	.+96     	; 0xbf2 <__ultoa_invert+0x6c>
 b92:	e8 94       	clt
 b94:	6f 93       	push	r22
 b96:	6e 7f       	andi	r22, 0xFE	; 254
 b98:	6e 5f       	subi	r22, 0xFE	; 254
 b9a:	7f 4f       	sbci	r23, 0xFF	; 255
 b9c:	8f 4f       	sbci	r24, 0xFF	; 255
 b9e:	9f 4f       	sbci	r25, 0xFF	; 255
 ba0:	af 4f       	sbci	r26, 0xFF	; 255
 ba2:	b1 e0       	ldi	r27, 0x01	; 1
 ba4:	3e d0       	rcall	.+124    	; 0xc22 <__ultoa_invert+0x9c>
 ba6:	b4 e0       	ldi	r27, 0x04	; 4
 ba8:	3c d0       	rcall	.+120    	; 0xc22 <__ultoa_invert+0x9c>
 baa:	67 0f       	add	r22, r23
 bac:	78 1f       	adc	r23, r24
 bae:	89 1f       	adc	r24, r25
 bb0:	9a 1f       	adc	r25, r26
 bb2:	a1 1d       	adc	r26, r1
 bb4:	68 0f       	add	r22, r24
 bb6:	79 1f       	adc	r23, r25
 bb8:	8a 1f       	adc	r24, r26
 bba:	91 1d       	adc	r25, r1
 bbc:	a1 1d       	adc	r26, r1
 bbe:	6a 0f       	add	r22, r26
 bc0:	71 1d       	adc	r23, r1
 bc2:	81 1d       	adc	r24, r1
 bc4:	91 1d       	adc	r25, r1
 bc6:	a1 1d       	adc	r26, r1
 bc8:	20 d0       	rcall	.+64     	; 0xc0a <__ultoa_invert+0x84>
 bca:	09 f4       	brne	.+2      	; 0xbce <__ultoa_invert+0x48>
 bcc:	68 94       	set
 bce:	3f 91       	pop	r19
 bd0:	2a e0       	ldi	r18, 0x0A	; 10
 bd2:	26 9f       	mul	r18, r22
 bd4:	11 24       	eor	r1, r1
 bd6:	30 19       	sub	r19, r0
 bd8:	30 5d       	subi	r19, 0xD0	; 208
 bda:	31 93       	st	Z+, r19
 bdc:	de f6       	brtc	.-74     	; 0xb94 <__ultoa_invert+0xe>
 bde:	cf 01       	movw	r24, r30
 be0:	08 95       	ret
 be2:	46 2f       	mov	r20, r22
 be4:	47 70       	andi	r20, 0x07	; 7
 be6:	40 5d       	subi	r20, 0xD0	; 208
 be8:	41 93       	st	Z+, r20
 bea:	b3 e0       	ldi	r27, 0x03	; 3
 bec:	0f d0       	rcall	.+30     	; 0xc0c <__ultoa_invert+0x86>
 bee:	c9 f7       	brne	.-14     	; 0xbe2 <__ultoa_invert+0x5c>
 bf0:	f6 cf       	rjmp	.-20     	; 0xbde <__ultoa_invert+0x58>
 bf2:	46 2f       	mov	r20, r22
 bf4:	4f 70       	andi	r20, 0x0F	; 15
 bf6:	40 5d       	subi	r20, 0xD0	; 208
 bf8:	4a 33       	cpi	r20, 0x3A	; 58
 bfa:	18 f0       	brcs	.+6      	; 0xc02 <__ultoa_invert+0x7c>
 bfc:	49 5d       	subi	r20, 0xD9	; 217
 bfe:	31 fd       	sbrc	r19, 1
 c00:	40 52       	subi	r20, 0x20	; 32
 c02:	41 93       	st	Z+, r20
 c04:	02 d0       	rcall	.+4      	; 0xc0a <__ultoa_invert+0x84>
 c06:	a9 f7       	brne	.-22     	; 0xbf2 <__ultoa_invert+0x6c>
 c08:	ea cf       	rjmp	.-44     	; 0xbde <__ultoa_invert+0x58>
 c0a:	b4 e0       	ldi	r27, 0x04	; 4
 c0c:	a6 95       	lsr	r26
 c0e:	97 95       	ror	r25
 c10:	87 95       	ror	r24
 c12:	77 95       	ror	r23
 c14:	67 95       	ror	r22
 c16:	ba 95       	dec	r27
 c18:	c9 f7       	brne	.-14     	; 0xc0c <__ultoa_invert+0x86>
 c1a:	00 97       	sbiw	r24, 0x00	; 0
 c1c:	61 05       	cpc	r22, r1
 c1e:	71 05       	cpc	r23, r1
 c20:	08 95       	ret
 c22:	9b 01       	movw	r18, r22
 c24:	ac 01       	movw	r20, r24
 c26:	0a 2e       	mov	r0, r26
 c28:	06 94       	lsr	r0
 c2a:	57 95       	ror	r21
 c2c:	47 95       	ror	r20
 c2e:	37 95       	ror	r19
 c30:	27 95       	ror	r18
 c32:	ba 95       	dec	r27
 c34:	c9 f7       	brne	.-14     	; 0xc28 <__ultoa_invert+0xa2>
 c36:	62 0f       	add	r22, r18
 c38:	73 1f       	adc	r23, r19
 c3a:	84 1f       	adc	r24, r20
 c3c:	95 1f       	adc	r25, r21
 c3e:	a0 1d       	adc	r26, r0
 c40:	08 95       	ret

00000c42 <__divmodsi4>:
 c42:	05 2e       	mov	r0, r21
 c44:	97 fb       	bst	r25, 7
 c46:	1e f4       	brtc	.+6      	; 0xc4e <__divmodsi4+0xc>
 c48:	00 94       	com	r0
 c4a:	0e 94 38 06 	call	0xc70	; 0xc70 <__negsi2>
 c4e:	57 fd       	sbrc	r21, 7
 c50:	07 d0       	rcall	.+14     	; 0xc60 <__divmodsi4_neg2>
 c52:	0e 94 3d 01 	call	0x27a	; 0x27a <__udivmodsi4>
 c56:	07 fc       	sbrc	r0, 7
 c58:	03 d0       	rcall	.+6      	; 0xc60 <__divmodsi4_neg2>
 c5a:	4e f4       	brtc	.+18     	; 0xc6e <__divmodsi4_exit>
 c5c:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__negsi2>

00000c60 <__divmodsi4_neg2>:
 c60:	50 95       	com	r21
 c62:	40 95       	com	r20
 c64:	30 95       	com	r19
 c66:	21 95       	neg	r18
 c68:	3f 4f       	sbci	r19, 0xFF	; 255
 c6a:	4f 4f       	sbci	r20, 0xFF	; 255
 c6c:	5f 4f       	sbci	r21, 0xFF	; 255

00000c6e <__divmodsi4_exit>:
 c6e:	08 95       	ret

00000c70 <__negsi2>:
 c70:	90 95       	com	r25
 c72:	80 95       	com	r24
 c74:	70 95       	com	r23
 c76:	61 95       	neg	r22
 c78:	7f 4f       	sbci	r23, 0xFF	; 255
 c7a:	8f 4f       	sbci	r24, 0xFF	; 255
 c7c:	9f 4f       	sbci	r25, 0xFF	; 255
 c7e:	08 95       	ret

00000c80 <__muluhisi3>:
 c80:	0e 94 8a 06 	call	0xd14	; 0xd14 <__umulhisi3>
 c84:	a5 9f       	mul	r26, r21
 c86:	90 0d       	add	r25, r0
 c88:	b4 9f       	mul	r27, r20
 c8a:	90 0d       	add	r25, r0
 c8c:	a4 9f       	mul	r26, r20
 c8e:	80 0d       	add	r24, r0
 c90:	91 1d       	adc	r25, r1
 c92:	11 24       	eor	r1, r1
 c94:	08 95       	ret

00000c96 <__mulshisi3>:
 c96:	b7 ff       	sbrs	r27, 7
 c98:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__muluhisi3>

00000c9c <__mulohisi3>:
 c9c:	0e 94 40 06 	call	0xc80	; 0xc80 <__muluhisi3>
 ca0:	82 1b       	sub	r24, r18
 ca2:	93 0b       	sbc	r25, r19
 ca4:	08 95       	ret

00000ca6 <__prologue_saves__>:
 ca6:	2f 92       	push	r2
 ca8:	3f 92       	push	r3
 caa:	4f 92       	push	r4
 cac:	5f 92       	push	r5
 cae:	6f 92       	push	r6
 cb0:	7f 92       	push	r7
 cb2:	8f 92       	push	r8
 cb4:	9f 92       	push	r9
 cb6:	af 92       	push	r10
 cb8:	bf 92       	push	r11
 cba:	cf 92       	push	r12
 cbc:	df 92       	push	r13
 cbe:	ef 92       	push	r14
 cc0:	ff 92       	push	r15
 cc2:	0f 93       	push	r16
 cc4:	1f 93       	push	r17
 cc6:	cf 93       	push	r28
 cc8:	df 93       	push	r29
 cca:	cd b7       	in	r28, 0x3d	; 61
 ccc:	de b7       	in	r29, 0x3e	; 62
 cce:	ca 1b       	sub	r28, r26
 cd0:	db 0b       	sbc	r29, r27
 cd2:	0f b6       	in	r0, 0x3f	; 63
 cd4:	f8 94       	cli
 cd6:	de bf       	out	0x3e, r29	; 62
 cd8:	0f be       	out	0x3f, r0	; 63
 cda:	cd bf       	out	0x3d, r28	; 61
 cdc:	09 94       	ijmp

00000cde <__epilogue_restores__>:
 cde:	2a 88       	ldd	r2, Y+18	; 0x12
 ce0:	39 88       	ldd	r3, Y+17	; 0x11
 ce2:	48 88       	ldd	r4, Y+16	; 0x10
 ce4:	5f 84       	ldd	r5, Y+15	; 0x0f
 ce6:	6e 84       	ldd	r6, Y+14	; 0x0e
 ce8:	7d 84       	ldd	r7, Y+13	; 0x0d
 cea:	8c 84       	ldd	r8, Y+12	; 0x0c
 cec:	9b 84       	ldd	r9, Y+11	; 0x0b
 cee:	aa 84       	ldd	r10, Y+10	; 0x0a
 cf0:	b9 84       	ldd	r11, Y+9	; 0x09
 cf2:	c8 84       	ldd	r12, Y+8	; 0x08
 cf4:	df 80       	ldd	r13, Y+7	; 0x07
 cf6:	ee 80       	ldd	r14, Y+6	; 0x06
 cf8:	fd 80       	ldd	r15, Y+5	; 0x05
 cfa:	0c 81       	ldd	r16, Y+4	; 0x04
 cfc:	1b 81       	ldd	r17, Y+3	; 0x03
 cfe:	aa 81       	ldd	r26, Y+2	; 0x02
 d00:	b9 81       	ldd	r27, Y+1	; 0x01
 d02:	ce 0f       	add	r28, r30
 d04:	d1 1d       	adc	r29, r1
 d06:	0f b6       	in	r0, 0x3f	; 63
 d08:	f8 94       	cli
 d0a:	de bf       	out	0x3e, r29	; 62
 d0c:	0f be       	out	0x3f, r0	; 63
 d0e:	cd bf       	out	0x3d, r28	; 61
 d10:	ed 01       	movw	r28, r26
 d12:	08 95       	ret

00000d14 <__umulhisi3>:
 d14:	a2 9f       	mul	r26, r18
 d16:	b0 01       	movw	r22, r0
 d18:	b3 9f       	mul	r27, r19
 d1a:	c0 01       	movw	r24, r0
 d1c:	a3 9f       	mul	r26, r19
 d1e:	70 0d       	add	r23, r0
 d20:	81 1d       	adc	r24, r1
 d22:	11 24       	eor	r1, r1
 d24:	91 1d       	adc	r25, r1
 d26:	b2 9f       	mul	r27, r18
 d28:	70 0d       	add	r23, r0
 d2a:	81 1d       	adc	r24, r1
 d2c:	11 24       	eor	r1, r1
 d2e:	91 1d       	adc	r25, r1
 d30:	08 95       	ret

00000d32 <_exit>:
 d32:	f8 94       	cli

00000d34 <__stop_program>:
 d34:	ff cf       	rjmp	.-2      	; 0xd34 <__stop_program>
